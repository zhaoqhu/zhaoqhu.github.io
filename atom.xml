<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-04-18T01:43:15+08:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">Zhao Q.H.’s Notes</title><subtitle>Keep It Simple, Stupid</subtitle><author><name>Zhao Q.H.</name></author><entry><title type="html">nextcloud yml安装</title><link href="http://localhost:4000/nextcloud/2021/03/09/nextcloud-yml/" rel="alternate" type="text/html" title="nextcloud yml安装" /><published>2021-03-09T00:00:00+08:00</published><updated>2021-03-09T00:00:00+08:00</updated><id>http://localhost:4000/nextcloud/2021/03/09/nextcloud-yml</id><content type="html" xml:base="http://localhost:4000/nextcloud/2021/03/09/nextcloud-yml/">&lt;h2 id=&quot;创建nextcloud安装目录&quot;&gt;创建nextcloud安装目录&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir nextcloud
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;创建mysql目录用于数据卷映射&quot;&gt;创建mysql目录用于数据卷映射&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd ~/nextcloud
mkdir mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;创建nextcloud文件目录用于映射&quot;&gt;创建nextcloud文件目录用于映射&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd nextcloud
mkdir nextcloud
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;创建docker-composeyml文件内容如下&quot;&gt;创建docker-compose.yml文件，内容如下&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: '2'

volumes:
  nextcloud:
  db:

services:
  db:
    image: mysql
    restart: always
    command: --default-authentication-plugin=mysql_native_password
    volumes:
      - /Users/zhaoqinghu/dev_docker/nextcloud/mysql:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=12345678
      - MYSQL_PASSWORD=nextcloud
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud

  app:
    image: nextcloud
    restart: always
    ports:
      - 7080:80
    links:
      - db
    volumes:
      - /Users/zhaoqinghu/dev_docker/nextcloud/nextcloud:/var/www/html
    environment:
      - MYSQL_PASSWORD=
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_HOST=db

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Zhao Q.H.</name></author><category term="nextcloud" /><summary type="html">创建nextcloud安装目录 mkdir nextcloud 创建mysql目录用于数据卷映射 cd ~/nextcloud mkdir mysql 创建nextcloud文件目录用于映射 cd nextcloud mkdir nextcloud 创建docker-compose.yml文件，内容如下 ``` version: ‘2’</summary></entry><entry><title type="html">php面试</title><link href="http://localhost:4000/php/2021/02/05/php-ms/" rel="alternate" type="text/html" title="php面试" /><published>2021-02-05T00:00:00+08:00</published><updated>2021-02-05T00:00:00+08:00</updated><id>http://localhost:4000/php/2021/02/05/php-ms</id><content type="html" xml:base="http://localhost:4000/php/2021/02/05/php-ms/">&lt;h2 id=&quot;线程和进程的区别&quot;&gt;线程和进程的区别&lt;/h2&gt;

&lt;p&gt;简而言之,一个程序至少有一个进程,一个进程至少有一个线程&lt;/p&gt;

&lt;p&gt;php-fpm是一个主进程master和多个工作进程worker，每个php-fpm进程有一个线程。&lt;/p&gt;

&lt;p&gt;1、php的哪些语言特性，在合适的场景可以显著减少内存开销？
spl
trait
Generator
type hint
2、对于php的自动加载描述正确的是？
Composer的自动加载是通过__autoload函数实现
在文件顶部use的时候会载入对应的类
自动加载函数只支持按Class/Interface/Trait名加载，不能按function名加载
现在大多数类库都遵循psr0规范
3、对于Trait描述正确的是
可以用来减少重复代码
一个类无法同时引入两个包含相同方法的Trait
子类中引入的Trait利的方法会覆盖父类的方法
在Trait中不可以调用引用类里的方法
4、下列对Composer描述正确的是
拿到一个Project类型的项目时，需要通过composer update来安装对应的依赖包
一般情况下应该把PHPUnit包含在require段
composer.json不仅可以指定依赖的PHP类库，还能指定依赖的PHP扩展
Library类型的项目，需要把composer.lock文件提交到版本库中
5、如果一个包遵循Semantic Version，下列哪些版本升级大概率不会出问题
6、按照RESTFul的规范，修改文章的展示隐藏应该使用哪一种路由
7、通常使用过滤特殊字符的方式来避免SQL注入
8、只要项目中使用了PDO的prepare就能完全避免SQL注入
9、CSRF攻击是因为没有对用户输入进行转义导致的
14、为了避免XSS攻击，需要在写入数据库前对其转义，从数据库读取后反转义&lt;/p&gt;</content><author><name>Zhao Q.H.</name></author><category term="PHP" /><summary type="html">线程和进程的区别</summary></entry><entry><title type="html">Elasticsearch 学习</title><link href="http://localhost:4000/2021/02/04/Elesticsearch/" rel="alternate" type="text/html" title="Elasticsearch 学习" /><published>2021-02-04T00:00:00+08:00</published><updated>2021-02-04T00:00:00+08:00</updated><id>http://localhost:4000/2021/02/04/Elesticsearch</id><content type="html" xml:base="http://localhost:4000/2021/02/04/Elesticsearch/"></content><author><name>Zhao Q.H.</name></author><summary type="html"></summary></entry><entry><title type="html">php高级教程-大型电商平台双十一Redis高并发秒杀解决方案</title><link href="http://localhost:4000/php/2021/01/28/php-redis-seckill/" rel="alternate" type="text/html" title="php高级教程-大型电商平台双十一Redis高并发秒杀解决方案" /><published>2021-01-28T00:00:00+08:00</published><updated>2021-01-28T00:00:00+08:00</updated><id>http://localhost:4000/php/2021/01/28/php-redis-seckill</id><content type="html" xml:base="http://localhost:4000/php/2021/01/28/php-redis-seckill/">&lt;h2 id=&quot;使用场景介绍&quot;&gt;使用场景介绍&lt;/h2&gt;
&lt;h3 id=&quot;秒杀红包&quot;&gt;秒杀红包&lt;/h3&gt;
&lt;p&gt;1、时间短、数量少
2、大流量、高并发&lt;/p&gt;

&lt;h3 id=&quot;数据安全&quot;&gt;数据安全&lt;/h3&gt;
&lt;p&gt;1、业务场景、高并发会引发问题
2、压力测试工具的使用
3、悲观锁、乐观锁、lua脚本
4、不同场景的解决方案
2.2redis一些相关的原理（10服用、原子性）&lt;/p&gt;

&lt;h3 id=&quot;秒杀场景遇到的问题&quot;&gt;秒杀场景遇到的问题&lt;/h3&gt;
&lt;p&gt;1、卡顿崩溃
2、超卖（库存变为负数）&lt;/p&gt;

&lt;p&gt;模拟秒杀库存只有3件的商品，如果用压力测试工具进行模拟500人进行秒杀的情况，比如发送了5000次链接，如果不做处理
一定会出现商品超卖的情况，实际成功的订单会大于3个，商品库存会变成负数，比如-36，那实际上成功的订单会是39个订单，超卖了36件，这样子就赔钱了。&lt;/p&gt;
&lt;h2 id=&quot;使用压力测试工具模拟高并发场景&quot;&gt;使用压力测试工具模拟高并发场景&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ab -n 请求数 -c 并发数 url地址
ab -n 500 -c 5000 http://127.0.0.1/seckill/buy.php #模拟500个客户端发送5000个请求
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;解决办法&quot;&gt;解决办法&lt;/h2&gt;
&lt;h3 id=&quot;数据库悲观锁&quot;&gt;数据库悲观锁&lt;/h3&gt;

&lt;h3 id=&quot;redis&quot;&gt;redis&lt;/h3&gt;
&lt;p&gt;1、redis速度快（单机的读写速度可以达到8万左右）
2、数据限制
悲观锁：假设当前的数据操作一定会发生冲突的，屏蔽一切（行锁、文件锁）&lt;/p&gt;

&lt;p&gt;如果用mysql的行锁会导致阻塞、等待状态，会崩溃。
性能差，速度慢。&lt;/p&gt;

&lt;p&gt;乐观锁：假设当前的数据不会发生并发冲突，在真写数据的时候，再去检查，有没有发生冲突。&lt;/p&gt;

&lt;p&gt;苹果商店排行20的App
淘宝客
双十一销售额，5亿，每秒并发14w&lt;/p&gt;</content><author><name>Zhao Q.H.</name></author><category term="PHP" /><category term="PHP" /><summary type="html">使用场景介绍 秒杀红包 1、时间短、数量少 2、大流量、高并发</summary></entry><entry><title type="html">Redis nginx memcached</title><link href="http://localhost:4000/redis/nginx/memcached/2021/01/25/Redis-nginx-memchached/" rel="alternate" type="text/html" title="Redis nginx memcached" /><published>2021-01-25T00:00:00+08:00</published><updated>2021-01-25T00:00:00+08:00</updated><id>http://localhost:4000/redis/nginx/memcached/2021/01/25/Redis-nginx-memchached</id><content type="html" xml:base="http://localhost:4000/redis/nginx/memcached/2021/01/25/Redis-nginx-memchached/"></content><author><name>Zhao Q.H.</name></author><summary type="html"></summary></entry><entry><title type="html">Laravel 安装</title><link href="http://localhost:4000/php/laravel/2021/01/23/laravel-install/" rel="alternate" type="text/html" title="Laravel 安装" /><published>2021-01-23T00:00:00+08:00</published><updated>2021-01-23T00:00:00+08:00</updated><id>http://localhost:4000/php/laravel/2021/01/23/laravel-install</id><content type="html" xml:base="http://localhost:4000/php/laravel/2021/01/23/laravel-install/">&lt;h3 id=&quot;composer全量镜像配置&quot;&gt;Composer全量镜像配置&lt;/h3&gt;
&lt;p&gt;由于国内用户访问Composer镜像的官方网站，在使用php的包管理工具Composer安装时，可能会下载安装的很慢，或者下载安装失败。
推荐使用国内阿里云镜像&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/ #全局安装
composer config -g --unset repos.packagist #取消配置

composer config repo.packagist composer https://mirrors.aliyun.com/composer/ #单个项目局部配置
composer config --unset repos.packagist #单个项目局部取消配置
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;安装最新版本laravel&quot;&gt;安装最新版本laravel&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /Users/zhaoqhu/www/
mkdir laravel_last #创建文件夹
composer create-project   laravel/laravel  ./  #安装laravel最新版本的框架到当前目录
php artisan #查看laravel框架的版本，目前的最新版本是8.24.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;安装指定版本laravel&quot;&gt;安装指定版本laravel&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /Users/zhaoqhu/www/
mkdir laravel_7_30_4
composer create-project   laravel/laravel ./   &quot;7.30.*&quot;;
php artisan 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;github下载laravel指定版本压缩包解压安装&quot;&gt;Github下载laravel指定版本压缩包解压安装&lt;/h3&gt;
&lt;p&gt;访问Github上对应的版本&lt;a href=&quot;https://github.com/laravel/laravel/archive/v7.30.0.zip&quot;&gt;https://github.com/laravel/laravel/archive/v7.30.0.zip&lt;/a&gt;,然后下载到本地电脑，然后解压，然后进入7.30.0目录&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unzip v7.30.0 
cd laravel-7.30.0
composer install #安装
php artisan -V #查看版本
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;使用-laravel命令行工具安装&quot;&gt;使用 laravel命令行工具安装&lt;/h3&gt;
&lt;p&gt;查看composer的home所在的目录，通过下面的命令，然后找到[home] /Users/zhaoqhu/.composer&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;composer global require laravel/installer #安装laravel命令行工具
composer config -l #查看composer配置
cd ~/.composer/vendor/bin#查看laravel命令行工具是否存在
 ~/.composer/vendor/bin/laravel new example-app; #安装
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;参考教程&quot;&gt;参考教程&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://laravel.com/docs/8.x/installation#installation-via-composer&quot;&gt;larave Composer安装方式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.aliyun.com/composer&quot;&gt; 阿里云 Composer 全量镜像&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pkg.phpcomposer.com/&quot;&gt;中国全量镜像&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zhao Q.H.</name></author><summary type="html">Composer全量镜像配置 由于国内用户访问Composer镜像的官方网站，在使用php的包管理工具Composer安装时，可能会下载安装的很慢，或者下载安装失败。 推荐使用国内阿里云镜像 ``` composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/ #全局安装 composer config -g –unset repos.packagist #取消配置</summary></entry><entry><title type="html">使用docker-compose.yml创建lnmp环境</title><link href="http://localhost:4000/docker/2021/01/23/docker-compose-npm-yml/" rel="alternate" type="text/html" title="使用docker-compose.yml创建lnmp环境" /><published>2021-01-23T00:00:00+08:00</published><updated>2021-01-23T00:00:00+08:00</updated><id>http://localhost:4000/docker/2021/01/23/docker-compose-npm-yml</id><content type="html" xml:base="http://localhost:4000/docker/2021/01/23/docker-compose-npm-yml/">&lt;h2 id=&quot;创建docker-composeyml文件&quot;&gt;创建docker-compose.yml文件&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: &quot;3&quot;
services:
  nginx:
    image: nginx:alpine
    ports:
    - 80:80
    volumes:
    - ./html:/usr/share/nginx/html
    - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  php:
    image: devilbox/php-fpm:8.0-work-release-0.123
    volumes:
    - ./html:/var/www/html
  mysql:
    image: mysql:5.6
    environment:
    - MYSQL_ROOT_PASSWORD=123456
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;启动&quot;&gt;启动&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/bobo132/docker-compose-demo-1&quot;&gt;https://github.com/bobo132/docker-compose-demo-1&lt;/a&gt;&lt;/p&gt;</content><author><name>Zhao Q.H.</name></author><category term="Docker" /><summary type="html">创建docker-compose.yml文件 version: &quot;3&quot; services: nginx: image: nginx:alpine ports: - 80:80 volumes: - ./html:/usr/share/nginx/html - ./nginx/nginx.conf:/etc/nginx/nginx.conf php: image: devilbox/php-fpm:8.0-work-release-0.123 volumes: - ./html:/var/www/html mysql: image: mysql:5.6 environment: - MYSQL_ROOT_PASSWORD=123456 启动 docker-compose up -d 参考资料 https://github.com/bobo132/docker-compose-demo-1</summary></entry><entry><title type="html">Redis 学习</title><link href="http://localhost:4000/nosql/redis/2021/01/23/redis-learning/" rel="alternate" type="text/html" title="Redis 学习" /><published>2021-01-23T00:00:00+08:00</published><updated>2021-01-23T00:00:00+08:00</updated><id>http://localhost:4000/nosql/redis/2021/01/23/redis-learning</id><content type="html" xml:base="http://localhost:4000/nosql/redis/2021/01/23/redis-learning/">&lt;h2 id=&quot;版本&quot;&gt;版本&lt;/h2&gt;
&lt;p&gt;当前最新版本是6.0&lt;/p&gt;

&lt;h2 id=&quot;redis安装&quot;&gt;redis安装&lt;/h2&gt;

&lt;p&gt;下载最新的稳定版，
make
make PREFIX=/usr/local/redis install
cd /usr/local/redis/bin #进入redis安装后的binary目录
ls #查看目录下的命令行工具&lt;/p&gt;

&lt;p&gt;redis-benhmark  #redis性能测试工具
redis-check-aof #检查aof日志的工具
redis-check-dump #检查rdb日志的工具
redis-cli #链接用的客户端工具
redis-server #redis服务进程&lt;/p&gt;

&lt;h2 id=&quot;启动&quot;&gt;启动&lt;/h2&gt;

&lt;h3 id=&quot;复制redis源码中的配置文件&quot;&gt;复制redis源码中的配置文件&lt;/h3&gt;
&lt;p&gt;cd /usr/local/redis
cp /usr/local/src/redis-2.6.16/redis.conf ./&lt;/p&gt;
&lt;h3 id=&quot;启动redis服务&quot;&gt;启动redis服务&lt;/h3&gt;
&lt;p&gt;/usr/local/redis/bin/redis-server ./redis.onf&lt;/p&gt;

&lt;h3 id=&quot;redis后台运行服务&quot;&gt;redis后台运行服务&lt;/h3&gt;

&lt;p&gt;修改redis.conf中的daemonize改为yes&lt;/p&gt;

&lt;h2 id=&quot;五大value&quot;&gt;五大Value&lt;/h2&gt;

&lt;h3 id=&quot;string字符串类型的操作&quot;&gt;String字符串类型的操作&lt;/h3&gt;
&lt;p&gt;set key value [ex 秒数][px 毫秒数]&lt;/p&gt;

&lt;p&gt;如果 ex 秒数和px 毫秒数，同时使用，则以后面的为准&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flushdb #清空数据
set site www.zixue.it
ttl site #查看生命周期,默认的生命周期是永久

set search www.baidu.com ex 10 px 6567

pttl search
flush db

flushdb #清空数据
set site www.so.com
set site www.baidu.com nx# nx的参数表示如果没有这个key才可以执行
get site #返回结果依然是www.so.com
set site www.google.com xx #xx的参数表示如果有这个key才可以执行
get site #返回值是www.google.com
set abc www.google.com xx#xx表示有这个key才可以执行

mset a aman b bold c controller d diamond
keys #返回a、b、c、d
mget a b c#一次获取多个key

flushdb

set word hello
get word
setrange word 2 ??
get word #返回结果he??o
set word hello 
setrange word 6 !
get world #返回结果hello\x00!
append word @@
#getrange key start stop
set area chinese
getrange area 1 4 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;字符串
数值
二进制
help @String&lt;/p&gt;

&lt;h3 id=&quot;list链表&quot;&gt;List链表&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lpush charlist a
rpush charlist b
rpush charlist b
lpush charlist 0
lrange charlist 1 2
lrange charlist 1 3
lrange charlist 0 3
lrange charlist 0 -1 #查看所有的链表上的值
lpop charlist #弹出最左边的值，链表上的值会消失
rpop charlist #弹出最右边的值，链表上的值会消失
flushdb #清空所有
rpush answer a b c a b d a

lrem answer 1 b#删除链表answer上的一个b
lrem answer -2 a#从链表answer最后开始删除两个a
fushdb
rpush charlist a b c d e f
lrange charlist 0 -1
ltrim charlist 2 5
lindex charlist  0
lindex charlist 1
lindex charlist 2
llen charlist #查看链表的长度
lrpush num 1 3 6 8 9 #创建一个num链表
linsert num before 3 2 #在链表num值3的前面添加2
linsert num after 9 10
lrange num 0 -1
linsert num after 99 10
linsert num after 9 10
flushdb
rpush task a b c d
rpoplpush task job #右边弹出task链表的值d存储到链表d左边
rpop job 
brpop job 20 #等待20秒,当收到新值后结束
lpush job e
blop job


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;位图法统计活跃用户3天连续登录&quot;&gt;位图法统计活跃用户3天连续登录&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;setbit mon 1000000000 0
setbit mon 3 1
setbit mon 5 1
setbit mon 7 1

set tues 100000000 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;hash&quot;&gt;Hash&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hset user1 name lisi
hset user1 age 28
hset user1 height 175
hgetall user1
hmset user2 name wang age 10 height 100
hgetall user2
hget user1 name 
hget user2 name
hmget user1 name height
hgetall user1
hdel user1 age
hgetall user1
hlen uesr1
hlen user2
hexists user1 age
hexists user2 age
hincrby user2 age 1
hgetall user2
hget user2 age
hincrbyfloat user2 age 0.5
hkeys user2
hvals user2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;set&quot;&gt;Set&lt;/h3&gt;
&lt;p&gt;1、无序性 2、确定性 3、唯一性&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sadd gender male female
sadd gender yao yao
sadd gender yao
smembers gender #查看gender所有的值
srem gender yao #删除yao
srem gender x c #删除失败(integer 0)
srem gender male x c #成功删除(male)
spop key #随机删除
sadd gender a b c d e f 
spop gender #随机删除无序集合gender里的值
smembers gender

srandmember gender
sismember gender Q #判断某个vlue在某个集合中
sismember gender f
scard gender #返回集合中元素的个数
sadd uuper A B C
sadd lower a b c

smove upper lower A #移动upper集合中的A到集合lower中
smembers upper
smembers lower

sadd lisi a b c d
sadd wang a b c d e f
sadd poly a b c d g

sinter lisi wang poly #求交集
sunion lisi wang poly#求并集
sdiff lisi wang
sinter lisi wang poly
sintersrore result lisi wang poly #求并集存入到result

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;zset&quot;&gt;ZSet&lt;/h3&gt;

&lt;p&gt;order set 有序集合&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flushdb
zadd class 12 lily 13 lucy 18 lilei 6 poly
zrange class 0 3#有序的查询出class集合中的前四个人
zrangebyscore class 13 18 #查询13岁到18岁的人
zrangebyscore class 1 20 limit 1 2
zrange class 1 3 withscores
zrangebyscore class 10 20 withscores #查看分数去某个范围内元素。
zrange class 0 -1
zrank class lily
zrank class poly
zrank class lilei
zrank class zhangfei
zrevrank class lilei
zrange class 0 -1 withscores
zremrangebysore class 10 15
zrange class 0 -1 withscores
zadd class 12 lily 13 lucy
zremrangebyrank class 0 1#删除poly 和lily
zrange class 0 -1 withscores
zrem class lucy
zrange class 0 -1 withscores
zrem class lilei
zrane class 0 -1 withscores
zadd ty 25 zhangfei 27 guanyu 28 libei
zcard ty 
zadd ty 23 zhaoyun
zcard ty
zcoun ty 25 30
flushdb
zadd lisi 3 cat 5 dog 6 horse
zadd wang 5 cat 6 dog 8 horse 1 donckey
zinterstore result 2 lisi wang
zrange result 0 -1 

zinterstore result 2 lisi wang aggregate min
zrange result 0 -1
zinterstore result 2 lisi wang aggregate max

zinterstore result 2 lisi wang weight 2 1 aggreagate max
zrange result 0 -1 withscores

zinterstore result 2 lisi wang weights 2 1 aggregate sum 
zrange result 0 -1 withscores
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;redis-事务&quot;&gt;redis 事务&lt;/h2&gt;
&lt;p&gt;redis开启事务后，所有的执行语句先放入到队列中，如果想取消可以执行discard命令，但是如果执行exec后，在队列中的语句已经执行成功了，回滚不回来，不支持回滚&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fulshdb
set wang 200
set zhao 700
multi #开启事务
decrby zhao 100
incryby wang 100
exec #执行成功
multi #开启事务
decryby zhao 100
sdfa
exec 执行错误
mget zhao wang
multi #开启事务
decryby zhao 100
sadd wang pig
exec #执行错误
multi #开启事务
decrby zhao 100
incrby wang 100
discard #取消 
#买票场景当车票只剩一张时，李四正在买票，redis开启事务，已经把修改车票和修改用户钱数的语句放到队列，还未执行exec，正在此时，王五把这张票买走了。

flushdb
set ticket 1
set lisi 300
set wang 300
#李四买票
multi
decr ticket
decrby lisi 100
#exec尚未执行exec


#王五买票成功了。
decr ticket

get ticket

#李四开启watch买票
set ticket 1
watch ticket
multi
decr ticket
decrby lisi 100
#exec尚未执行，这时王五又执行了
desc ticket
get ticket

watch key1 key2 key3#监听多个key
unwatch #取消监听多个key

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;频道发布与消息订阅&quot;&gt;频道发布与消息订阅&lt;/h2&gt;

&lt;p&gt;服务端&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;publish news &quot;today is sunshine&quot;
publish news &quot;still sunshine&quot;
publish news &quot;away sunshine&quot;
publish news &quot;thress&quot;
publish newstop &quot;four&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;客户端1&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;subscribe news
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;客户端2&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;subscribe news
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;psubscribe new*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;redis和memcached相比的独特之处&quot;&gt;redis和memcached相比的独特之处&lt;/h2&gt;

&lt;p&gt;1、redis可以用来做存储(storage)，而memcached是用来做缓存(cache)，这个特点主要因为其有持久化的功能
2、存储的数据有“结构”，对于memcached来说，存储的数据，只有1种类型“字符串”，而redis则可以存储字符串、链表、哈希结构、集合、有序集合&lt;/p&gt;</content><author><name>Zhao Q.H.</name></author><summary type="html">版本 当前最新版本是6.0</summary></entry><entry><title type="html">Docker 学习</title><link href="http://localhost:4000/2021/01/21/docker-learn/" rel="alternate" type="text/html" title="Docker 学习" /><published>2021-01-21T00:00:00+08:00</published><updated>2021-01-21T00:00:00+08:00</updated><id>http://localhost:4000/2021/01/21/docker-learn</id><content type="html" xml:base="http://localhost:4000/2021/01/21/docker-learn/">&lt;p&gt;Docker公司简介&lt;/p&gt;

&lt;p&gt;地址：美国剑桥大街318号加州帕洛阿尔托94306&lt;/p&gt;

&lt;h2 id=&quot;docker工具简介&quot;&gt;Docker工具简介:&lt;/h2&gt;

&lt;p&gt;Docker是开源应用容器的应用容器引擎，基于Go语言开发实现，属于操作系统层面的虚拟化技术。
Docker可以让开发者打包他们的应用以及依赖包到一个轻量级，可移植的容器中，然后发布到任何有Docker的电脑(window和Linux)上。
容器是完全使用沙箱机制，相互之间不会有任何接口（类似iphone的app）,更重要的是容器性能开销极低。&lt;/p&gt;

&lt;h2 id=&quot;docker能做什么&quot;&gt;Docker能做什么&lt;/h2&gt;
&lt;p&gt;Docker 可以解决虚拟机能够虚拟机解决的问题，同时能够解决虚拟机由于电脑资源过高而无法解决的问题。&lt;/p&gt;

&lt;h2 id=&quot;docker在线工具&quot;&gt;Docker在线工具&lt;/h2&gt;
&lt;p&gt;https://labs.play-with-docker.com/&lt;/p&gt;

&lt;p&gt;Docker中每个镜像都拥有一个Linux发行版系统，拥有完整的运行环境&lt;/p&gt;

&lt;p&gt;Docker的主要用法也是创建多个镜像，通过应用编排构成一个完整的应用&lt;/p&gt;

&lt;p&gt;镜像越多，在同一台服务器中就会有越多的运行环境（发行版系统），它们本身也会造成开销&lt;/p&gt;

&lt;p&gt;请问在这种多镜像的环境下，Docker是否会因为系统过多，造成极大的额外开销？&lt;/p&gt;

&lt;p&gt;Docker安装&lt;/p&gt;

&lt;p&gt;docker远程仓库&lt;/p&gt;

&lt;p&gt;镜像Image&lt;/p&gt;

&lt;p&gt;容器Container&lt;/p&gt;

&lt;p&gt;Docker命令&lt;/p&gt;

&lt;p&gt;docker info
docker version
docker run hello-world&lt;/p&gt;

&lt;p&gt;docker镜像加速&lt;/p&gt;

&lt;p&gt;“registry-mirrors”: [
    “https://jtjwzjlb.mirror.aliyuncs.com”,
    “https://registry.docker-cn.com”
  ]&lt;/p&gt;

&lt;h2 id=&quot;下载镜像&quot;&gt;下载镜像：&lt;/h2&gt;
&lt;p&gt;从Docker远程镜像仓库获取镜像的命令是docker pull。请命令格式为：&lt;/p&gt;

&lt;p&gt;docker pull 镜像名字&lt;/p&gt;

&lt;h2 id=&quot;下载技巧&quot;&gt;下载技巧&lt;/h2&gt;
&lt;p&gt;从 https://hub.docker.com/上面搜索镜像的安装方式，但是实际上是从阿里云加速镜像上面下载的。
例如：
docker pull training/webapp
docker pull busybox
docker pull centos&lt;/p&gt;

&lt;p&gt;training/webapp #python的app
busybox:是一个集成了三百多个最常用Linux命令工具，简化的Linux系统
centos：linux系统容器&lt;/p&gt;

&lt;h2 id=&quot;查看镜像&quot;&gt;查看镜像&lt;/h2&gt;

&lt;p&gt;docker image ls
或者
docker images&lt;/p&gt;

&lt;h2 id=&quot;删除镜像&quot;&gt;删除镜像&lt;/h2&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;docker image rm 镜像名字&lt;/td&gt;
      &lt;td&gt;镜像id&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;通过镜像创建容器进行容器操作&quot;&gt;通过镜像创建容器进行容器操作&lt;/h2&gt;

&lt;h3 id=&quot;查看正在运行的容器&quot;&gt;查看正在运行的容器&lt;/h3&gt;
&lt;p&gt;docker ps&lt;/p&gt;

&lt;h3 id=&quot;查看所有容器&quot;&gt;查看所有容器&lt;/h3&gt;

&lt;p&gt;docker ps -a&lt;/p&gt;

&lt;h3 id=&quot;启动容器&quot;&gt;启动容器&lt;/h3&gt;

&lt;h4 id=&quot;基于镜像新建一个容器并启动&quot;&gt;基于镜像新建一个容器并启动，&lt;/h4&gt;

&lt;h4 id=&quot;启动一个已存在的容器&quot;&gt;启动一个已存在的容器&lt;/h4&gt;

&lt;p&gt;docker run training/webapp
提示启动了一个服务，http://0.0.0.0:5000/&lt;/p&gt;

&lt;h4 id=&quot;端口映射&quot;&gt;端口映射&lt;/h4&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;docker run -p 本地端口:容器端口 容器名字&lt;/td&gt;
      &lt;td&gt;容器id&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;后台运行语法&quot;&gt;后台运行语法&lt;/h4&gt;

&lt;p&gt;docker -d run -p 8888:5000 training/webapp&lt;/p&gt;

&lt;h4 id=&quot;在本地电脑浏览器中执行localhost8888就可以看到hello-world&quot;&gt;在本地电脑浏览器中执行localhost:8888，就可以看到hello world&lt;/h4&gt;

&lt;h3 id=&quot;交互运行&quot;&gt;交互运行&lt;/h3&gt;

&lt;p&gt;启动一个bash终端，允许用户进行交互。&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;docker run -t -i 容器名字&lt;/td&gt;
      &lt;td&gt;容器id /bin/bash&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;-t选项让docker分配一个伪终端(pseudo-tty)并绑定到容器的标准输入上。
-i则让容器的标准输入保持打开。
在交互式模式下，用户可以通过所创建的终端来输入linux命令.&lt;/p&gt;

&lt;p&gt;例如&lt;/p&gt;

&lt;p&gt;docker run -it centos /bin/bash
创建centos 容器并且进入centos容器中&lt;/p&gt;

&lt;h3 id=&quot;退出容器&quot;&gt;退出容器&lt;/h3&gt;

&lt;p&gt;exit&lt;/p&gt;

&lt;h3 id=&quot;终止容器&quot;&gt;终止容器&lt;/h3&gt;

&lt;p&gt;docker stop 容器id&lt;/p&gt;

&lt;h3 id=&quot;删除容器&quot;&gt;删除容器&lt;/h3&gt;

&lt;p&gt;docker rm 容器id&lt;/p&gt;

&lt;h3 id=&quot;开启容器&quot;&gt;开启容器&lt;/h3&gt;

&lt;p&gt;docker start 容器id&lt;/p&gt;

&lt;h3 id=&quot;重启容器&quot;&gt;重启容器&lt;/h3&gt;

&lt;p&gt;docker restart 容器id&lt;/p&gt;

&lt;h3 id=&quot;查看容器启动产生的数据&quot;&gt;查看容器启动产生的数据。&lt;/h3&gt;

&lt;p&gt;docker logs 容器的id&lt;/p&gt;

&lt;h3 id=&quot;进入正在运行的容器里&quot;&gt;进入正在运行的容器里&lt;/h3&gt;

&lt;h3 id=&quot;主机和容器之间拷贝文件&quot;&gt;主机和容器之间拷贝文件&lt;/h3&gt;

&lt;h4 id=&quot;容器拷贝到主机&quot;&gt;容器拷贝到主机&lt;/h4&gt;

&lt;p&gt;docker cp 容器id:/opt/webapp/app.py d:/www&lt;/p&gt;

&lt;h4 id=&quot;主机拷贝到容器&quot;&gt;主机拷贝到容器&lt;/h4&gt;

&lt;p&gt;docker cp d:/www/文件 容器id:/opt/webapp/&lt;/p&gt;

&lt;h3 id=&quot;8数据卷&quot;&gt;8、数据卷&lt;/h3&gt;
&lt;h4 id=&quot;什么是数据卷&quot;&gt;什么是数据卷&lt;/h4&gt;
&lt;p&gt;数据卷是一个可供一个或多个容器使用的特殊目录，他绕过UFS，可以提供很多有用的特性：
1、数据卷可以在容器之间共享和重用
2、对数据卷的修改会立马生效
3、对数据卷的更新，不会影响镜像
4、数据卷默认会一直存在，即使容器被删除&lt;/p&gt;

&lt;p&gt;使用docker run -d -p 8888:5000 -v d:/wwww/webapp:/opt/webapp 31ff6ac986e0(容器id)&lt;/p&gt;

&lt;h4 id=&quot;前提需要检查docker配置项中的file-sharing中是否包含想要创建的数据卷目录&quot;&gt;***前提需要检查docker配置项中的FILE SHARING中是否包含想要创建的数据卷目录。&lt;/h4&gt;

&lt;h3 id=&quot;docker应用-搭建php开发环境&quot;&gt;Docker应用-搭建PHP开发环境&lt;/h3&gt;

&lt;p&gt;9.1下载阿里云的lamp镜像&lt;/p&gt;

&lt;p&gt;docker pull registry.cn-hangzhou.aliyuncs.com/itsource/centos-lamp:v3&lt;/p&gt;

&lt;p&gt;docker run -itd  -p 80:80 -p 3306:3306 –name lamp –privileged=true 
-v /data/wwwroot/www.baidu.com:/data/wwwroot/www.baidu.com  registry.cn-hangzhou.aliyuncs.com/itsource/centos-lamp:v2  /usr/sbin/init
-i 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上
-t 则让容器的标准输入保持打开。
-d 则让容器在后台运行。
–name lamp为容器起名为lamp
–privileged=true 让container内的root拥有真正的root权限。
-v 创建数据卷，将本地主机目录挂着到容器的指定目录中&lt;/p&gt;

&lt;p&gt;/usr/sbin/init是为了获取root权限&lt;/p&gt;

&lt;h3 id=&quot;制作阿里云镜像&quot;&gt;制作阿里云镜像&lt;/h3&gt;
&lt;p&gt; 
 #### 将修改后的容器生成镜像&lt;/p&gt;

&lt;p&gt; docker commit -a “itsource” -m “this is my centos” 3ee458166862(容器id) my-centos:v2&lt;/p&gt;

&lt;p&gt; *** -a 作者的名字 -m注释都要使用双引号&lt;/p&gt;

&lt;h4 id=&quot;登录到阿里云&quot;&gt;登录到阿里云&lt;/h4&gt;

&lt;p&gt;界面=&amp;gt;镜像列表=&amp;gt;创建镜像仓库&lt;/p&gt;

&lt;p&gt;地址：华东1
命名空间：itsource
仓库名称：my-centos2
摘要：my-centos2
描述信息：my-centos2
仓库类型：公开
设置代码源：本地仓库&lt;/p&gt;

&lt;h3 id=&quot;根据创建的镜像仓库zhaoqhu_docker_image&quot;&gt;根据创建的镜像仓库zhaoqhu_docker_image&lt;/h3&gt;

&lt;p&gt;根据操作指南把本地仓库推送到阿里云上面。&lt;/p&gt;</content><author><name>Zhao Q.H.</name></author><summary type="html">Docker公司简介</summary></entry><entry><title type="html">php xdebug安装和调试</title><link href="http://localhost:4000/php/2021/01/20/php-xdebug/" rel="alternate" type="text/html" title="php xdebug安装和调试" /><published>2021-01-20T00:00:00+08:00</published><updated>2021-01-20T00:00:00+08:00</updated><id>http://localhost:4000/php/2021/01/20/php-xdebug</id><content type="html" xml:base="http://localhost:4000/php/2021/01/20/php-xdebug/">&lt;h1 id=&quot;php安装xdebug&quot;&gt;php安装xdebug&lt;/h1&gt;

&lt;h2 id=&quot;先查看php版本然后在确定下载xdebug的版本&quot;&gt;先查看php版本，然后在确定下载xdebug的版本。&lt;/h2&gt;
&lt;p&gt;比如php的版本是7.1.5，访问xdebug历史版本下载页https://xdebug.org/download/historical
，然后选定并下载和php版本匹配的Linux,macOS Source，Xdebug2.5.5这个版本支持php7.1.5,下载地址是https://xdebug.org/files/xdebug-2.5.5.tgz。&lt;/p&gt;

&lt;h2 id=&quot;使用php715自带的工具phpize工具进行编译安装&quot;&gt;使用php7.1.5自带的工具phpize工具进行编译安装&lt;/h2&gt;

&lt;p&gt;比如php7.1.5安装的目录是/usr/local/php7-15，phpize工具所在的目录是/usr/local/php7-15/bin/phpize&lt;/p&gt;

&lt;p&gt;xdebug-2.5.5.tgz&lt;/p&gt;

&lt;p&gt;解压&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tar -zxvf xdebug-2.5.5.tgz -C /usr/local/php7-15-modules/

cd xdebug-2.5.5

/usr/local/php7-15/bin/phpize #执行生成configure文件
./configure   --with-php-config=/usr/local/php7-15/bin/php-config
make
make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;配置phpini&quot;&gt;配置php.ini&lt;/h2&gt;
&lt;p&gt;查看php.ini文件位置&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/local/php7-15/bin/php --ini
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;打开并修改&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;;xdebug start
zend_extension=&quot;/usr/local/php7-15/lib/php/extensions/no-debug-non-zts-20160303/xdebug.so&quot;
xdebug.remote_enable = on
xdebug.remote_handler = dbgp
xdebug.remote_host = 127.0.0.1
xdebug.remote_port=9001

;xdebug end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;sublime-text3安装xdebug&quot;&gt;sublime text3安装xdebug&lt;/h2&gt;

&lt;h3 id=&quot;界面打开&quot;&gt;界面打开&lt;/h3&gt;
&lt;p&gt;首选项=&amp;gt;Package Control=&amp;gt;Install Package&lt;/p&gt;
&lt;h3 id=&quot;快捷键打开&quot;&gt;快捷键打开&lt;/h3&gt;
&lt;p&gt;打开命令行输入Mac上输入快捷键Command+shift+p，Windows上快捷键Control+shift+p&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Package Control: Install Package
xdebug-client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;配置sublime-text3&quot;&gt;配置sublime text3&lt;/h3&gt;
&lt;p&gt;首选项=&amp;gt;Package Settings=&amp;gt;Package Control=&amp;gt;Xdebug=&amp;gt;Settings-User&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{

&quot;port&quot;: 9001,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;chrome-安装xdebug-helper-插件&quot;&gt;Chrome 安装Xdebug helper 插件&lt;/h2&gt;

&lt;h3 id=&quot;安装方法&quot;&gt;安装方法&lt;/h3&gt;
&lt;h3 id=&quot;配置xdebug-helper&quot;&gt;配置Xdebug helper&lt;/h3&gt;

&lt;p&gt;IDE key，选其他，输入&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sublime.xdebug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;firefox安装xdebug-helper插件&quot;&gt;Firefox安装Xdebug helper插件&lt;/h2&gt;

&lt;h3 id=&quot;安装方法-1&quot;&gt;安装方法&lt;/h3&gt;
&lt;p&gt;打开附加组件=》搜索Xdebug helper=&amp;gt;安装&lt;/p&gt;
&lt;h3 id=&quot;配置&quot;&gt;配置&lt;/h3&gt;
&lt;p&gt;IDE key，选其他，输入&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sublime.xdebug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;检查是否配置成功&quot;&gt;检查是否配置成功&lt;/h2&gt;

&lt;h3 id=&quot;创建indexphp&quot;&gt;创建index.php&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php

var_dump(&quot;hello xdebug&quot;); #设置断点
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;开启调试&quot;&gt;开启调试&lt;/h3&gt;

&lt;p&gt;快捷键打开命令行输入工具Command+shif+p,输入:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Xdebug: Start Debugging

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;浏览器访问-localhostindexphp&quot;&gt;浏览器访问 localhost/index.php&lt;/h3&gt;

&lt;h3 id=&quot;检查xdebug-context控制台&quot;&gt;检查Xdebug Context控制台&lt;/h3&gt;

&lt;p&gt;如果控制台有内容输出，证明配置成功&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$_COOKIE = array[1]
$_COOKIE['XDEBUG_SESSION'] = (string) sublime.xdebug
$_ENV = array[0]
$_FILES = array[0]
$_GET = array[0]
$_POST = array[0]
$_REQUEST = array[0]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Zhao Q.H.</name></author><category term="PHP" /><summary type="html">php安装xdebug</summary></entry></feed>