<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-11-28T10:44:18+08:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">Zhao Q.H.’s Notes</title><subtitle>Keep It Simple, Stupid</subtitle><author><name>Zhao Q.H.</name></author><entry><title type="html">OAuth2 service microsoft</title><link href="http://localhost:4000/oauth2/2019/11/25/oAuth-2-service-microsoft/" rel="alternate" type="text/html" title="OAuth2 service microsoft" /><published>2019-11-25T00:00:00+08:00</published><updated>2019-11-25T00:00:00+08:00</updated><id>http://localhost:4000/oauth2/2019/11/25/oAuth-2-service-microsoft</id><content type="html" xml:base="http://localhost:4000/oauth2/2019/11/25/oAuth-2-service-microsoft/">&lt;p&gt;在网站中添加第三方microsoft帐号登录功能，方法和步骤&lt;/p&gt;

&lt;h2 id=&quot;访问authorization_endpoint&quot;&gt;访问authorization_endpoint。&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;authorization_endpoint的链接地址为&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://login.microsoftonline.com/common/oauth2/v2.0/authorize?
client_id=4ec1c7f2-9e38-4b8e-8073-5e6b68da2162&amp;amp;
response_type=code&amp;amp;
redirect_uri=http://localhost/oauth/callback_microsoft.php&amp;amp;
response_mode=query&amp;amp;
scope=openid%20profile%20email%20user.read&amp;amp;
state=12345&amp;amp;
prompt=consent

authorization_endpoint链接参数解释
https://login.microsoftonline.com/common/oauth2/v2.0/authorize?
client_id=4ec1c7f2-9e38-4b8e-8073-5e6b68da2162&amp;amp; 
response_type=code&amp;amp;
redirect_uri=http://localhost/oauth/callback_microsoft.php&amp;amp;
response_mode=query&amp;amp;
scope=openid%20offline_access%20https%3A%2F%2Fgraph.microsoft.com%2Fuser.read&amp;amp; //scope值需要rawurlencode()
state=12345&amp;amp; //state值需要rawurlencode();这个参数值可以自定义，并且会自动返回附加到回调地址上，
prompt=consent//这个值，会使用户弹出一个登陆的界面
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;访问authorization_endpoint的方式&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用JS访问authorization_endpoint&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;window.location.href = &quot;
https://login.microsoftonline.com/common/oauth2/v2.0/authorize?
client_id=4ec1c7f2-9e38-4b8e-8073-5e6b68da2162&amp;amp;
response_type=code&amp;amp;
redirect_uri=http://localhost/oauth/callback_microsoft.php&amp;amp;
response_mode=query&amp;amp;
scope=openid%20profile%20email%20user.read&amp;amp;
state=12345&amp;amp;
prompt=consent
&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;*使用PHP访问authorization_endpoint&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;header(&quot;Location: https://login.microsoftonline.com/common/oauth2/v2.0/authorize?
client_id=4ec1c7f2-9e38-4b8e-8073-5e6b68da2162&amp;amp;
response_type=code&amp;amp;
redirect_uri=http://localhost/oauth/callback_microsoft.php&amp;amp;
response_mode=query&amp;amp;
scope=openid%20profile%20email%20user.read&amp;amp;
state=12345&amp;amp;
prompt=consent&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;访问token_endpoint&quot;&gt;访问token_endpoint。&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$url_token = &quot;https://login.microsoftonline.com/common/oauth2/v2.0/token&quot;;
$data['client_id'] = '4ec1c7f2-9e38-4b8e-8073-5e6b68da2162';
$scope = &quot;openid profile email user.read&quot;;
//$scope = &quot;&quot;;
$data['scope'] = $scope;
$data['code'] = $_GET['code'];//这个值是访问访问authorization_endpoint的URL后自动返回的
$data['redirect_uri'] = 'http://localhost/oauth/callback_microsoft.php';
$data['grant_type'] = 'authorization_code';
$data['client_secret'] = 'rlPw-4rgooGre:@8D?90p6py=LOPMG_0';
$res = post_url($url_token,$data);
$objToken = json_decode($res);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;访问userinfo_endpoint&quot;&gt;访问userinfo_endpoint&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$url_userinfo = &quot;https://graph.microsoft.com/v1.0/me&quot;;
$header[] = &quot;Authorization: &quot;.$objToken-&amp;gt;token_type.&quot; &quot;.$objToken-&amp;gt;access_token;
//var_dump($url_userinfo,$header);die;
$resUserInfo = get_url($url_userinfo,$header);
var_dump(666,$resUserInfo);die;

function get_url($url,$data){
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $url);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); 
	curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE); 
	curl_setopt($ch, CURLOPT_CUSTOMREQUEST,&quot;GET&quot;); 
	curl_setopt($ch, CURLOPT_HTTPHEADER, $data);
	curl_setopt($ch, CURLOPT_PROXY, '127.0.0.1');
	curl_setopt($ch, CURLOPT_PROXYPORT, '1080');
	$output = curl_exec($ch);
	if($output === false)
	  {
	      echo 'Curl error: ' . curl_error($ch);
	  }
	curl_close($ch);
	return $output;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;app-registrations创建步骤&quot;&gt;App registrations创建步骤&lt;/h2&gt;

&lt;p&gt;1、访问&lt;a href=&quot;https://portal.azure.com/#allservices&quot;&gt;https://portal.azure.com/#allservices&lt;/a&gt;&lt;br /&gt;
2、Identity=&amp;gt;App registrations=&amp;gt;New registration&lt;br /&gt;
3、registration主要参数有Application (client) ID，client secrect,创建方法选中已创建的registration=&amp;gt;Certificates &amp;amp; secrets=&amp;gt; New client secrect&lt;br /&gt;
4、开发过程中程序代码里client_id ，client_secret，redirect_uri，这三项的值，需要registration提供。&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow&quot;&gt;https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&amp;amp;tabs=http&quot;&gt;https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&amp;amp;tabs=http&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zhao Q.H.</name></author><category term="OAuth2" /><summary type="html">在网站中添加第三方microsoft帐号登录功能，方法和步骤</summary></entry><entry><title type="html">OAuth2 service google</title><link href="http://localhost:4000/oauth2/2019/10/29/oAuth-2-service-google/" rel="alternate" type="text/html" title="OAuth2 service google" /><published>2019-10-29T00:00:00+08:00</published><updated>2019-10-29T00:00:00+08:00</updated><id>http://localhost:4000/oauth2/2019/10/29/oAuth-2-service-google</id><content type="html" xml:base="http://localhost:4000/oauth2/2019/10/29/oAuth-2-service-google/">&lt;p&gt;在网站中添加第三方google帐号登录功能，方法和步骤&lt;/p&gt;

&lt;h2 id=&quot;访问authorization_endpoint&quot;&gt;访问authorization_endpoint。&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;authorization_endpoint的链接地址为&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://accounts.google.com/o/oauth2/v2/auth?
response_type=code&amp;amp;
scope=openid%20profile%20email&amp;amp;
redirect_uri=http://localhost/oauth/callback.php&amp;amp;
client_id=825260887949-tpka28ca3l4pacbjq83bdm1lnft58aga.apps.googleusercontent.com&amp;amp;
state=kwqrurwwlowpvnnprswlqxvwnsnwyymznrmupqsqvlpuumztvvdo&amp;amp;
access_type=offline&amp;amp;
prompt=consent

authorization_endpoint链接参数解释

https://accounts.google.com/o/oauth2/v2/auth?
response_type=code&amp;amp;
scope=openid%20profile%20email&amp;amp; //scope值需要rawurlencode()
redirect_uri=http://localhost/oauth/callback.php&amp;amp;//redirect_uri值需要rawurlencode()
client_id=825260887949-tpka28ca3l4pacbjq83bdm1lnft58aga.apps.googleusercontent.com&amp;amp;//client_id值需要rawurlencode()
state=kwqrurwwlowpvnnprswlqxvwnsnwyymznrmupqsqvlpuumztvvdo&amp;amp;//state值需要rawurlencode();这个参数值可以自定义，并且会自动返回附加到回调地址上，
access_type=offline&amp;amp;
prompt=consent//这个值，会使用户弹出一个登陆的界面
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;访问authorization_endpoint的方式&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用JS访问&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;window.location.href = https://accounts.google.com/o/oauth2/v2/auth?
response_type=code&amp;amp;
scope=openid%20profile%20email&amp;amp;
redirect_uri=http://localhost/oauth/callback.php&amp;amp;
client_id=825260887949-tpka28ca3l4pacbjq83bdm1lnft58aga.apps.googleusercontent.com&amp;amp;
state=kwqrurwwlowpvnnprswlqxvwnsnwyymznrmupqsqvlpuumztvvdo&amp;amp;
access_type=offline&amp;amp;
prompt=consent
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;使用PHP访问&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;header(&quot;Location: https://accounts.google.com/o/oauth2/v2/auth?
response_type=code&amp;amp;
scope=openid%20profile%20email&amp;amp;
redirect_uri=http://localhost/oauth/callback.php&amp;amp;
client_id=825260887949-tpka28ca3l4pacbjq83bdm1lnft58aga.apps.googleusercontent.com&amp;amp;
state=kwqrurwwlowpvnnprswlqxvwnsnwyymznrmupqsqvlpuumztvvdo&amp;amp;
access_type=offline&amp;amp;
prompt=consent&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;访问token_endpoint&quot;&gt;访问token_endpoint。&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$data = array();
$data['client_id'] = '825260887949-tpka28ca3l4pacbjq83bdm1lnft58aga.apps.googleusercontent.com';
$data['client_secret'] = 'CeTlkOnFl3stgkTT4JgcxbWC';
$data['grant_type'] = 'authorization_code';
$data['redirect_uri'] = 'http://localhost/oauth/callback.php';
$data['scope'] = '';
$data['code'] = trim($_GET['code']); //这个值是访问访问authorization_endpoint的URL后自动返回的

$url = 'https://www.googleapis.com/oauth2/v4/token';
$res = post_url($url,$data);
function post_url($url,$data){
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $url);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
	curl_setopt($ch, CURLOPT_SSL_VERIFYHOST,FALSE);
	curl_setopt($ch, CURLOPT_POST, 1);
	curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
	curl_setopt($ch, CURLOPT_PROXY, '127.0.0.1');
	curl_setopt($ch, CURLOPT_PROXYPORT, '1080');
	$output = curl_exec($ch);
	
  if($output === false)
  {
      echo 'Curl error: ' . curl_error($ch);
  }
  curl_close($ch);
	return $output;
 }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;访问userinfo_endpoint&quot;&gt;访问userinfo_endpoint&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$header[] = 'Authorization:'.$_SESSION['oauth2_google_token_type'].' '.$_SESSION['oauth2_google_access_token'];
$request_url = &quot;https://www.googleapis.com/oauth2/v2/userinfo&quot;;
$res = get_url($request_url,$header);
var_dump($res);die;
function get_url($url,$data){
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $url);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); 
	curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE); 
	curl_setopt($ch, CURLOPT_CUSTOMREQUEST,&quot;GET&quot;); 
	curl_setopt($ch, CURLOPT_HTTPHEADER, $data);
	//curl_setopt($ch, CURLOPT_PROXY, '127.0.0.1');
	//curl_setopt($ch, CURLOPT_PROXYPORT, '1080');
	$output = curl_exec($ch);
	if($output === false)
	  {
	      echo 'Curl error: ' . curl_error($ch);
	  }
	curl_close($ch);
	return $output;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;oauth-20-client-ids创建步骤&quot;&gt;OAuth 2.0 client IDs创建步骤&lt;/h2&gt;

&lt;p&gt;1、访问 &lt;a href=&quot;https://console.developers.google.com/&quot;&gt;Google API Console&lt;/a&gt;&lt;br /&gt;
2、project=&amp;gt;Credentials=&amp;gt;OAuth client ID=&amp;gt;Web application&lt;br /&gt;
3、OAuth 2.0 client ID的主要参数有Client ID，Client secrect，Authorized redirect URIs&lt;br /&gt;
4、开发过程中程序代码里client_id ，client_secret，redirect_uri，这三项的值，需要OAuth 2.0 client ID提供。&lt;/p&gt;

&lt;h2 id=&quot;google提供的在线使用api工具&quot;&gt;google提供的在线使用API工具&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://accounts.google.com/o/oauth2/v2/auth?
 scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.metadata.readonly&amp;amp;
 access_type=offline&amp;amp;
 include_granted_scopes=true&amp;amp;
 state=state_parameter_passthrough_value&amp;amp;
 redirect_uri=https://developers.google.com/oauthplayground&amp;amp;
 response_type=code&amp;amp;
 client_id=825260887949-tpka28ca3l4pacbjq83bdm1lnft58aga.apps.googleusercontent.com


参数解释
https://accounts.google.com/o/oauth2/v2/auth?
 scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.metadata.readonly&amp;amp;
 access_type=offline&amp;amp;
 include_granted_scopes=true&amp;amp;
 state=state_parameter_passthrough_value&amp;amp;//自定义我们网站里面需要使用的参数，会自动附加到回调地址上，
 redirect_uri=https://developers.google.com/oauthplayground&amp;amp; //这个是google提供的在线API工具地址，这个回调地址需要添加到credentials
 response_type=code&amp;amp;
 client_id=825260887949-tpka28ca3l4pacbjq83bdm1lnft58aga.apps.googleusercontent.com//这个是需要在google API console里创建credentials，然后在里面有client_id

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/oauthplayground/&quot;&gt;Google OAuth 2 API 在线工具&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/identity/protocols/OpenIDConnect&quot;&gt;https://developers.google.com/identity/protocols/OpenIDConnect&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zhao Q.H.</name></author><category term="OAuth2" /><summary type="html">在网站中添加第三方google帐号登录功能，方法和步骤</summary></entry><entry><title type="html">Ubuntu 14.04 lts 升级到 16.04 lts</title><link href="http://localhost:4000/linux/2019/10/11/ubuntu14.04-lts-to-16.04-lts/" rel="alternate" type="text/html" title="Ubuntu 14.04 lts 升级到 16.04 lts" /><published>2019-10-11T00:00:00+08:00</published><updated>2019-10-11T00:00:00+08:00</updated><id>http://localhost:4000/linux/2019/10/11/ubuntu14.04%20lts-to-16.04%20lts</id><content type="html" xml:base="http://localhost:4000/linux/2019/10/11/ubuntu14.04-lts-to-16.04-lts/">&lt;h2 id=&quot;故障描述&quot;&gt;故障描述&lt;/h2&gt;

&lt;p&gt;升级到16.04后，只有命令行模式，没有网络，apt-get命令失效，&lt;/p&gt;

&lt;h2 id=&quot;故障原因&quot;&gt;故障原因&lt;/h2&gt;

&lt;h2 id=&quot;解决方法&quot;&gt;解决方法&lt;/h2&gt;

&lt;p&gt;重启电脑，同时一直按”Esc”键，进入GRUB界面&lt;/p&gt;

&lt;h2 id=&quot;apt-get错误&quot;&gt;apt-get错误&lt;/h2&gt;

&lt;p&gt;apt: relocation error: version GLIBCXX_3.4.21 not defined in file libstdc++.so.6 with link time reference&lt;/p&gt;

&lt;p&gt;解决办法：需要网络可以正常访问外网，执行下面的命令&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ wget http://security.ubuntu.com/ubuntu/pool/main/g/gcc-5/libstdc++6_5.4.0-6ubuntu1~16.04.10_amd64.deb
sudo dpkg -i libstdc++6_5.4.0-6ubuntu1~16.04.10_amd64.deb

# I also found this helpful
$ sudo apt-get -f install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;命令行模式切换到图形界面模式&quot;&gt;命令行模式切换到图形界面模式&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ service lightdm start

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/davidhopper/article/details/79288573&quot;&gt;命令行模式切换到图形界面模式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://askubuntu.com/questions/777803/apt-relocation-error-version-glibcxx-3-4-21-not-defined-in-file-libstdc-so-6/792471&quot;&gt;apt-get报错解决办法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://juejin.im/post/5c11b6aee51d4570b57aff07&quot;&gt;修复ubuntu16.04，GRUB解决办法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zhao Q.H.</name></author><category term="linux" /><summary type="html">故障描述</summary></entry><entry><title type="html">chatroom</title><link href="http://localhost:4000/2019/10/09/chatroom/" rel="alternate" type="text/html" title="chatroom" /><published>2019-10-09T00:00:00+08:00</published><updated>2019-10-09T00:00:00+08:00</updated><id>http://localhost:4000/2019/10/09/chatroom</id><content type="html" xml:base="http://localhost:4000/2019/10/09/chatroom/">&lt;h1 id=&quot;登录&quot;&gt;登录&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;参数
  用户名：userName, 房间：roomId, 是否为主播：is_host&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;检查userName,roomId
  如果userName,roomId的值为空则返回错误的提示信息。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;检查某用户在某房间是否为主播
  例如：userName的值为zhaoQH,roomId的值为北京666,检查zhaoQH在北京666的房间是否为主播&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;检查某用户是否已在房间&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zhao Q.H.</name></author><summary type="html">登录</summary></entry><entry><title type="html">Node.js学习笔记</title><link href="http://localhost:4000/node.js/2019/10/08/Nodejs-learning/" rel="alternate" type="text/html" title="Node.js学习笔记" /><published>2019-10-08T00:00:00+08:00</published><updated>2019-10-08T00:00:00+08:00</updated><id>http://localhost:4000/node.js/2019/10/08/Nodejs-learning</id><content type="html" xml:base="http://localhost:4000/node.js/2019/10/08/Nodejs-learning/">&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.runoob.com/nodejs/nodejs-install-setup.html&quot;&gt;参考链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nodejs升级&quot;&gt;Node.js升级&lt;/h2&gt;

&lt;h3 id=&quot;windows下升级&quot;&gt;windows下升级&lt;/h3&gt;
&lt;p&gt;windows下升级Nodejs比较简单，直接下载msi文件，安装覆盖原安装路径就可以了。由于众所周知的原因，国内访问Nodejs官网下载Nodejs安装文件时间非常DT的事，此处附上淘宝的国内镜像源，速度非常快。&lt;/p&gt;

&lt;h3 id=&quot;linux下升级&quot;&gt;linux下升级&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;检查Node的当前版本&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ node -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;清除npm cache&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo npm chache clean -f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;node有一个模块叫n（这名字可够短的。。。），是专门用来管理node.js的版本的。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install -g n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;升级到最新稳定版本&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ n stable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;升级到指定版本&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ n v4.4.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;或者&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ n 4.4.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;npm升级&quot;&gt;npm升级&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;查看当前版本&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;升级至最新版本或者指定版本
 @符号后面可以添加你想更新到的版本号。
 latest代表是最新版本
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install npm@latest -g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;补充常用npm命令&quot;&gt;补充常用npm命令&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm -v          #显示版本，检查npm 是否正确安装。
$ npm install express   #安装express模块
$ npm install -g express  #全局安装express模块
$ npm install --save express #会把express包安装到该目录下的node_modules目录中,会在package.json的dependencies属性下添加express,之后运行npm install 或者 npm install -production或者著名NODE_ENV变量值为production时，会自动安装express到node_module目录中.
$ npm install --save-dev express #会把express包安装到该目录下的node_modules目录中,会在package.json的dependencies属性下添加express,之后运行npm install会自动安装express到node_module目录中但是执行npm install -production或者著名NODE_ENV变量值为production时，不会自动安装express到node_module目录中.
$ npm install -D express # 等于npm install --save-dev express
$ npm list         #列出已安装模块
$ npm show express     #显示模块详情
$ npm update        #升级当前目录下的项目的所有模块 
$ npm update express    #升级当前目录下的项目的指定模块
$ npm update -g express  #升级全局安装的express模块
$ npm uninstall express  #删除指定的模块
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;table&gt;&lt;tr&gt;&lt;td style=&quot;background-color: #ffdce0 ; border: 1px solid #d73a49;&quot;&gt;注：运行时需要用到的包使用npm install –save express，否则使用npm install –save-dev express。
。&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tj/n&quot;&gt;https://github.com/tj/n&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jb51.net/article/52409.htm&quot;&gt;https://www.jb51.net/article/52409.htm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.npmjs.com/try-the-latest-stable-version-of-npm&quot;&gt;https://docs.npmjs.com/try-the-latest-stable-version-of-npm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zhao Q.H.</name></author><category term="Node.js" /><summary type="html">安装</summary></entry><entry><title type="html">browserify</title><link href="http://localhost:4000/node.js/2019/10/08/Browserify-watchify/" rel="alternate" type="text/html" title="browserify" /><published>2019-10-08T00:00:00+08:00</published><updated>2019-10-08T00:00:00+08:00</updated><id>http://localhost:4000/node.js/2019/10/08/Browserify-watchify</id><content type="html" xml:base="http://localhost:4000/node.js/2019/10/08/Browserify-watchify/">&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;Browserify lets you require(‘modules’) in the browser by bundling up all of your dependencies.&lt;/p&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install -g browserify
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;使用一&quot;&gt;使用一&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Here is a tutorial on how to use Browserify on the command line to bundle up a simple file called main.js along with all of its dependencies: main.js&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var unique = require('uniq');

var data = [1, 2, 2, 3, 4, 5, 5, 5, 6];

console.log(unique(data));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Install the uniq module with npm:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install uniq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Now recursively bundle up all the required modules starting at main.js into a single file called bundle.js with the browserify command:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;browserify main.js -o bundle.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Browserify parses the AST for require() calls to traverse the entire dependency graph of your project.
Drop a single &amp;lt;script&amp;gt; tag into your html and you’re done!&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script src=&quot;bundle.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;使用二-browserify-watchify-socketio-client-jquery&quot;&gt;使用二 browserify, watchify, socket.io-client, jquery、&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;安装browserify , socket.io-client, watchify&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm i browserify --save-dev

$ npm install --save socket.io-client

$ npm i watchify --save-dev

$npm i --save jquery
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;package.json&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;name&quot;: &quot;app&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;&quot;,
  &quot;main&quot;: &quot;main.js&quot;,
  &quot;scripts&quot;: {
    &quot;build&quot;: &quot;browserify main.js -o ../server/public/bundle.js&quot;,
    &quot;watch&quot;: &quot;watchify main.js -o bundle.js&quot;
  },
  &quot;author&quot;: &quot;&quot;,
  &quot;license&quot;: &quot;ISC&quot;,
  &quot;dependencies&quot;: {
    &quot;socket.io-client&quot;: &quot;^2.3.0&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;main.js文件使用require引入js模块&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;执行命令，编译和监控文件&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm run build
$ npm run watch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://browserify.org/&quot;&gt;http://browserify.org/&lt;/a&gt;&lt;/p&gt;</content><author><name>Zhao Q.H.</name></author><category term="Node.js" /><summary type="html">介绍 Browserify lets you require(‘modules’) in the browser by bundling up all of your dependencies.</summary></entry><entry><title type="html">jekyll学习笔记</title><link href="http://localhost:4000/jekyll/2019/09/29/jekyll-learning/" rel="alternate" type="text/html" title="jekyll学习笔记" /><published>2019-09-29T00:00:00+08:00</published><updated>2019-09-29T00:00:00+08:00</updated><id>http://localhost:4000/jekyll/2019/09/29/jekyll-learning</id><content type="html" xml:base="http://localhost:4000/jekyll/2019/09/29/jekyll-learning/">&lt;h2 id=&quot;jekyll简介&quot;&gt;jekyll简介&lt;/h2&gt;

&lt;h2 id=&quot;jekyll安装&quot;&gt;jekyll安装&lt;/h2&gt;

&lt;h2 id=&quot;jekyll生成新项目&quot;&gt;jekyll生成新项目&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ gem install jekyll
~ $ jekyll new myblog
~ $ cd myblog
~/myblog $ jekyll serve
~/myblog $ bundle exec jekyll server #=&amp;gt;windows system start jekyll server
# =&amp;gt; Now browse to http://localhost:4000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Zhao Q.H.</name></author><category term="jekyll" /><summary type="html">jekyll简介</summary></entry><entry><title type="html">mediasoup</title><link href="http://localhost:4000/mediasoup/2019/09/27/mediasoup/" rel="alternate" type="text/html" title="mediasoup" /><published>2019-09-27T00:00:00+08:00</published><updated>2019-09-27T00:00:00+08:00</updated><id>http://localhost:4000/mediasoup/2019/09/27/mediasoup</id><content type="html" xml:base="http://localhost:4000/mediasoup/2019/09/27/mediasoup/">&lt;p&gt;learning mediasoup A WebRTC SFU for Node.js&lt;/p&gt;

&lt;h2 id=&quot;full-mesh&quot;&gt;FULL MESH&lt;/h2&gt;

&lt;h2 id=&quot;mcu-multipoint-control-unit&quot;&gt;MCU: MULTIPOINT CONTROL UNIT&lt;/h2&gt;

&lt;h2 id=&quot;sfu-selective-forwarding-unit&quot;&gt;SFU: SELECTIVE FORWARDING UNIT&lt;/h2&gt;

&lt;h2 id=&quot;mediasoup-client&quot;&gt;mediasoup-client&lt;/h2&gt;

&lt;h3 id=&quot;mediasoup-client安装&quot;&gt;mediasoup-client安装&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install mediasoup-client@3 --save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;浏览器端使用nodejs模块mediasoup-client&quot;&gt;浏览器端使用Node.js模块mediasoup-client&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;JavaScript ES6 plus CommonJS&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;browserify 、webpack、gulp&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ubunto-安装mediasoupv3&quot;&gt;ubunto 安装mediasoupv3&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;新建mediasoupv3-zhaoqhu目录，分别创建app,server目录&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir mediasoupv3-zhaoqhu
$ mkdir server
$ mkdir app
$ cd server
$ npm init
$ sudo npm install mediasoup@3 --save --unsafe-perm=true --allow-root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;检查gcc 版本
 如果gcc版本小于 4.9，需要升级gcc到4.9以上，ubunto 14.04 lts 好像最高的gcc 版本是 4.8.5，升级 ubunto 到 16.04 lts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;首先添加ppa到库：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo add-apt-repository ppa:ubuntu-toolchain-r/test
$ sudo apt-get update
$ sudo apt-get upgrade
$ sudo apt-get 
$ sudo apt-get install gcc-4.8 g++-4.8
$ sudo apt-get install gcc-4.9 g++-4.9
$ sudo apt-get install gcc-5 g++-5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;mediasoup-serverjs分析&quot;&gt;mediasoup server.js分析&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const fs = require('fs');   //文件系统
   	fs.readFileSync(path[,options]) //方法用于同步读取文件，返回一个字符串。
	cert : fs.readFileSync(config.https.tls.cert),
	key  : fs.readFileSync(config.https.tls.key)

--------------------------------------
const https = require('https');

--------------------------------------
const url = require('url'); //模块用于生成和解析URL。该模块使用前，必须加载。
	url.parse(urlString[, parseQueryString[, slashesDenoteHost]]) //The url.parse() method takes a URL string, parses it, and returns a URL object.
	const u = url.parse(info.request.url, true);

const protoo = require('protoo-server');
const mediasoup = require('mediasoup');
----------------------------------------
const express = require('express'); //Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。
const expressApp = express();

expressApp.use()和app.METHOD()(METHOD包括get(),put(),post(),delete())都是express应用层中间件，处理用户浏览器端发起到服务端的请求，
但是一般情况下expressApp.use()都写在app.METHOD()前面，然后在use()中间件函数里写一些公共的代码，然后next()到METHOD()中间件函数中。

expressApp.use(bodyParser.json()); //
expressApp.param([name],callback); //执行Express路由(expressApp.get(),expressApp.post(),expressApp.put(),expressApp.delete()),会触发expressApp.param()这个方法，

expressApp.param(
'roomId', (req, res, next, roomId) =&amp;gt;
{
	// The room must exist for all API requests.
	if (!rooms.has(roomId))
	{
		const error = new Error(`room with id &quot;${roomId}&quot; not found`);

		error.status = 404;
		throw error;
	}

	req.room = rooms.get(roomId);

	next();
});
----------------------------------------
const bodyParser = require('body-parser');
body-parser是express框架常用的一个中间件，作用是对post请求的请求体进行解析。结合express().use()和express().METHOD()的使用方法，
expressApp.use(bodyParser.json()); 
expressApp.post(
'/rooms/:roomId/broadcasters', async (req, res, next) =&amp;gt;
{

})



-----------------------------------------
const AwaitQueue = require('awaitqueue');

这个Node.js组件是Mediasoup的作者编写的，

-----------------------------------------
const Logger = require('./lib/Logger');
const Room = require('./lib/Room');
const interactiveServer = require('./lib/interactiveServer');
const interactiveClient = require('./lib/interactiveClient');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;multiparty引入的moudle&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const config = require('./config/config');
const fs = require('fs');
const http = require('http');
-------------------------------
const spdy = require('spdy');//配置http访问方式


-------------------------------
const express = require('express');

--------------------------------
const compression = require('compression');

app.user(compression()) //通过 Gzip 压缩，有助于显著降低响应主体的大小，从而提高 Web 应用程序的速度。可使用压缩中间件进行 Express 应用程序中的 gzip 压缩。例如
--------------------------------
const mediasoup = require('mediasoup');
const AwaitQueue = require('awaitqueue');
const Logger = require('./lib/Logger');
const Room = require('./lib/Room');
const utils = require('./util');

----------------------------------------
const base64 = require('base-64');
// 加密解密参数
state : base64.encode(JSON.stringify({
	roomId : req.query.roomId,
	peerId : req.query.peerId,
	code   : utils.random(10)
}))
const state = JSON.parse(base64.decode(req.query.state));

----------------------------------------------
const passport = require('passport');
-------------------------------------

const { Issuer, Strategy } = require('openid-client');
const session = require('express-session');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;mediasoup-client知识点&quot;&gt;mediasoup-client知识点&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;new mediasoupClient.Device(); //实例化mediasoupClent&lt;/li&gt;
  &lt;li&gt;await this._mediasoupDevice.load()&lt;/li&gt;
  &lt;li&gt;this._mediasoupDevice.createSendTransport()&lt;/li&gt;
  &lt;li&gt;this._mediasoupDevice.createRecvTransport()&lt;/li&gt;
  &lt;li&gt;this._mediasoupDevice.canProduce();&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mediasoup知识点&quot;&gt;mediasoup知识点&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;const mediasoupWorker = mediasoup.createWorker()&lt;/li&gt;
  &lt;li&gt;const mediasoupRouter = mediasoupWorker.createRouter({ mediaCodecs });&lt;/li&gt;
  &lt;li&gt;this._mediasoupRouter.canConsume()&lt;/li&gt;
  &lt;li&gt;this._mediasoupRouter.rtpCapabilities;&lt;/li&gt;
  &lt;li&gt;mediasoupWorker.close();&lt;/li&gt;
  &lt;li&gt;const audioLevelObserver = await mediasoupRouter.createAudioLevelObserver();&lt;/li&gt;
  &lt;li&gt;const transport = await this._mediasoupRouter.createWebRtcTransport();&lt;/li&gt;
  &lt;li&gt;transport.setMaxIncomingBitrate(maxIncomingBitrate); }&lt;/li&gt;
  &lt;li&gt;transport.connect({ dtlsParameters });&lt;/li&gt;
  &lt;li&gt;transport.restartIce();&lt;/li&gt;
  &lt;li&gt;await transport.produce({ kind, rtpParameters, appData })&lt;/li&gt;
  &lt;li&gt;await transport.getStats();&lt;/li&gt;
  &lt;li&gt;consumer = await transport.consume();&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;multiparty-工作流程&quot;&gt;multiparty 工作流程&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;app-&amp;gt;src-&amp;gt;index.js&lt;/p&gt;

    &lt;p&gt;logger.debug(‘DOM ready’);&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;app-&amp;gt;src-&amp;gt;RoomClient.js&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export default class RoomClient
{
	static init(data){}
	constructor({ roomId, peerId, device, useSimulcast, produce, consume, forceTcp }){logger.debug('constructor() [roomId: &quot;%s&quot;, peerId: &quot;%s&quot;, device: &quot;%s&quot;, useSimulcast: &quot;%s&quot;, produce: &quot;%s&quot;, consume: &quot;%s&quot;, forceTcp: &quot;%s&quot;]',roomId, peerId, device.flag, useSimulcast, produce, consume, forceTcp);}
	------------------------------------------
	close(){logger.debug('close()');}
	------------------------------------------
	_startKeyListener(){}
	_startDevicesListener(){}
	login(){}
	logout(){}
	closeLoginWindow(){}
	_soundNotification(){logger.error('_soundAlert.play() | failed: %o', error);}
	notify(text){}
	timeoutCallback(callback){}
	sendRequest(method, data){// 发送命令到服务端socket
return new Promise((resolve, reject) =&amp;gt;
		{
			if (!this._signalingSocket)
			{
				reject('No socket connection.');
			}
			else
			{
				this._signalingSocket.emit(
					'request',
					{ method, data },
					this.timeoutCallback((err, response) =&amp;gt;
					{
						if (err)
						{
							reject(err);
						}
						else
						{
							resolve(response);
						}
					})
				);
			}
		});
	


	}




	async changeDisplayName(displayName){logger.debug('changeDisplayName() [displayName:&quot;%s&quot;]', displayName);}
	async changeProfilePicture(picture){logger.debug('changeProfilePicture() [picture: &quot;%s&quot;]', picture);}
	async sendChatMessage(chatMessage){logger.debug('sendChatMessage() [chatMessage:&quot;%s&quot;]', chatMessage);}
	saveFile(file){}
	handleDownload(magnetUri){}
	_handleTorrent(torrent){}
	async shareFiles(files){}
	async _sendFile(magnetUri){logger.debug('sendFile() [magnetUri: %o]', magnetUri);}
	async getServerHistory(){logger.debug('getServerHistory()');}
	------------------------------------------
	async muteMic(){logger.debug('muteMic()');}
	async unmuteMic(){logger.debug('unmuteMic()');}
	------------------------------------------
	async updateSpotlights(spotlights){logger.debug('updateSpotlights()');}
	async changeAudioDevice(deviceId){logger.debug('changeAudioDevice() [deviceId: %s]', deviceId);}
	async changeVideoResolution(resolution){logger.debug('changeVideoResolution() [resolution: %s]', resolution);}
	async changeWebcam(deviceId){logger.debug('changeWebcam() [deviceId: %s]', deviceId);}
	setSelectedPeer(peerId){logger.debug('setSelectedPeer() [peerId:&quot;%s&quot;]', peerId);}
	async modifyPeerConsumer(peerId, type, mute){logger.debug('modifyPeerConsumer() [peerId:&quot;%s&quot;, type:&quot;%s&quot;]',peerId,type);}
	async _pauseConsumer(consumer){logger.debug('_pauseConsumer() [consumer: %o]', consumer);}
	async _resumeConsumer(consumer){logger.debug('_resumeConsumer() [consumer: %o]', consumer);}
	async sendRaiseHandState(state){logger.debug('sendRaiseHandState: ', state);}
	async join({ joinVideo }){
		this._signalingSocket = io(this._signalingUrl);
		logger.debug('signaling Peer &quot;connect&quot; event');
		this._signalingSocket.on('connect',()=&amp;gt;{logger.debug('signaling Peer &quot;connect&quot; event');});
		this._signalingSocket.on('disconnect',()=&amp;gt;{logger.warn('signaling Peer &quot;disconnect&quot; event');});
		this._signalingSocket.on('close',()=&amp;gt;{logger.warn('signaling Peer &quot;close&quot; event');});
		this._signalingSocket.on('request',async (request, cb)=&amp;gt;{logger.debug(
				'socket &quot;request&quot; event [method:%s, data:%o]',
				request.method, request.data);
				});
		this._signalingSocket.on('notification', async (notification)=&amp;gt;{
			switch (notification.method)
			{
				case 'roomReady':{}
				case 'roomLocked':{}
				case 'lockRoom':{}
				case 'unlockRoom':{}
				case 'activeSpeaker':{}
				case 'changeDisplayName':{}
				case 'changeProfilePicture':{}
				case 'auth':{}
				case 'chatMessage':{}
				case 'sendFile':{}
				case 'producerScore':{}
				case 'newPeer':{}
				case 'peerClosed':{}
				case 'consumerClosed':{}
				case 'consumerPaused':{}
				case 'consumerResumed':{}
				case 'consumerLayersChanged':{}
				case 'consumerScore':{}
			}



			});
		this._signalingSocket.on('connect',()=&amp;gt;{});
		this._signalingSocket.on('connect',()=&amp;gt;{});
		this._signalingSocket.on('connect',()=&amp;gt;{});
		this._signalingSocket.on('connect',()=&amp;gt;{});
		this._signalingSocket.on('connect',()=&amp;gt;{});
		this._signalingSocket.on('connect',()=&amp;gt;{});



	}
	async _joinRoom({ joinVideo }){
		logger.debug('_joinRoom()');

		this._mediasoupDevice = new mediasoupClient.Device(); //实例化mediasoupClent
		const routerRtpCapabilities = await this.sendRequest('getRouterRtpCapabilities') //socket.io发送mediasoup命令
		await this._mediasoupDevice.load({ routerRtpCapabilities }); //mediasoup-client根据socket.io发送命令返回来的数据load()
		if(this._produce){
			//socket.io发送Producer命令
			const transportInfo = await this.sendRequest( 'createWebRtcTransport',{forceTcp  : this._forceTcp,producing : true,consuming : false});
			//定义并接收socket.io返回来的值
			const {id,iceParameters,iceCandidates,dtlsParameters} = transportInfo;
			//mediasoupClient创建发送通道
			this._sendTransport = this._mediasoupDevice.createSendTransport({id,iceParameters,iceCandidates,dtlsParameters});
			this._sendTransport.on('connect',(){})
			this._sendTransport.on('produce',(){})
		}
		if(this._consumer){
			//socket.io发送consumer创建webRTC通道
			const transportInfo = await this.sendRequest('createWebRtcTransport',{forceTcp  : this._forceTcp,producing : false,consuming : true});
			const {id,iceParameters,iceCandidates,dtlsParameters} = transportInfo;

			//mediasoupClient创建接受通道
			this._recvTransport = this._mediasoupDevice.createRecvTransport(
			{
				id,
				iceParameters,
				iceCandidates,
				dtlsParameters
			});
		}
		//socket.io发送join命令
		const { peers } = await this.sendRequest(
		'join',{displayName: displayName,picture: picture,device: this._device,
			rtpCapabilities : this._consume
				? this._mediasoupDevice.rtpCapabilities
				: undefined
		});



		

	}
	------------------------------------------
	async lockRoom(){
		logger.debug('lockRoom()');
		//socket.io发送lockRoom命令
		await this.sendRequest('lockRoom');
	}
	async unlockRoom(){
		logger.debug('unlockRoom()');
		//socket.io发送unlockRoom命令
		await this.sendRequest('unlockRoom');

	}
	------------------------------------------
	async enableMic(){
		logger.debug(
				'enableMic() | new selected audio device [device:%o]',device);
		logger.debug('enableMic() | calling getUserMedia()');
		this._micProducer = await this._sendTransport.produce(
		{
			track,
			codecOptions :
			{
				opusStereo : 1,
				opusDtx    : 1
			},
			appData : 
			{ source: 'mic' }
		});


	}
	async disableMic(){
		logger.debug('disableMic()');
		await this.sendRequest(
				'closeProducer', { producerId: this._micProducer.id });
	}
	------------------------------------------
	async enableScreenSharing(){}
	async disableScreenSharing(){}
	------------------------------------------
	async enableWebcam(){
		if (!this._mediasoupDevice.canProduce('video')
		this._sendTransport.producetrack,
					appData : 
					{
						source : 'webcam'
					}
				})
	}
	async disableWebcam(){
		logger.debug('disableWebcam()');
		this._webcamProducer = await this.sendRequest(
				'closeProducer', { producerId: this._webcamProducer.id });
	}
	------------------------------------------
	async _updateAudioDevices(){logger.debug('_updateAudioDevices()');}
	async _updateWebcams(){logger.debug('_updateWebcams()');}
	async _getAudioDeviceId(){logger.debug('_getAudioDeviceId()');}
	async _getWebcamDeviceId(){logger.debug('_getWebcamDeviceId()');}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;浏览器端browser和服务端server通信&quot;&gt;浏览器端browser和服务端server通信&lt;/h2&gt;

&lt;p&gt;服务端地址：const url = &lt;code class=&quot;highlighter-rouge&quot;&gt;wss://${hostname}:${port}/?peerId=${peerId}&amp;amp;roomId=${roomId}&lt;/code&gt;;
服务端用到的roomId,和peerId是通过浏览器端定义并传递过去的&lt;/p&gt;

&lt;h3 id=&quot;browser通过初始化socketio-client&quot;&gt;browser通过初始化socket.io-client&lt;/h3&gt;

&lt;p&gt;初始化socket.io-client默认向服务端socket.io服务发送connection命令，服务端socket.io监听到connection命令后，根据browser端socket.io-client传递过来的roomId参数，执行获取或者创建房间,&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;async join(){this._signalingSocket = io(this._signalingUrl)}=============&amp;gt;async function runWebSocketServer(){
	const io = require('socket.io')(httpsServer);
	io.on('connection', (socket) =&amp;gt;
	{
		const { roomId, peerId } = socket.handshake.query;

		if (!roomId || !peerId)
		{
			logger.warn('connection request without roomId and/or peerId');

			socket.disconnect(true);

			return;
		}

		logger.info(
			'connection request [roomId:&quot;%s&quot;, peerId:&quot;%s&quot;]', roomId, peerId);

		queue.push(async () =&amp;gt;
		{
			const room = await getOrCreateRoom({ roomId }); //创建房间

			room.handleConnection({ peerId, socket }); //创建peer
		})
		.catch((error) =&amp;gt;
		{
			logger.error('room creation or room joining failed:%o', error);

			socket.disconnect(true);

			return;
		});
	});
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;创建房间方法getorcreateroomroomid&quot;&gt;创建房间方法getOrCreateRoom({roomId})&lt;/h3&gt;

&lt;p&gt;房间数量受到mediasoupWorkers的限制，mediasoupWorkers的数量是config配置文件里根据cpu的性能限制，在开启服务 node server.js运行时，就执行了runMediasoupWorkers()方法根据配置文件把mediasoupWorkers初始化成数组了，该数组包含了所有可用的mediasoupworker了，创建房间用到的方法是Room.js里面的create()方法，在执行create方法里面又通过传递参数mediasoupworker,创建了mediasoupRouter,创建房间成功后执行room.handleConnection方法,创建房间成功后执行this._notification(socket, ‘roomReady’)，发送命令roomReady给socket.io-client;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;async function getOrCreateRoom({ roomId })
{
	let room = rooms.get(roomId);

	// If the Room does not exist create a new one.
	if (!room)
	{
		logger.info('creating a new Room [roomId:%s]', roomId);

		const mediasoupWorker = getMediasoupWorker();

		room = await Room.create({ mediasoupWorker, roomId });

		rooms.set(roomId, room);
		room.on('close', () =&amp;gt; rooms.delete(roomId));
	}

	return room;
}
async function runMediasoupWorkers()
{
	const { numWorkers } = config.mediasoup;

	logger.info('running %d mediasoup Workers...', numWorkers);

	for (let i = 0; i &amp;lt; numWorkers; ++i)
	{
		const worker = await mediasoup.createWorker(
			{
				logLevel   : config.mediasoup.worker.logLevel,
				logTags    : config.mediasoup.worker.logTags,
				rtcMinPort : config.mediasoup.worker.rtcMinPort,
				rtcMaxPort : config.mediasoup.worker.rtcMaxPort
			});

		worker.on('died', () =&amp;gt;
		{
			logger.error(
				'mediasoup Worker died, exiting  in 2 seconds... [pid:%d]', worker.pid);

			setTimeout(() =&amp;gt; process.exit(1), 2000);
		});

		mediasoupWorkers.push(worker);
	}
}

/**
 * Get next mediasoup Worker.
 */
function getMediasoupWorker()
{
	const worker = mediasoupWorkers[nextMediasoupWorkerIdx];

	if (++nextMediasoupWorkerIdx === mediasoupWorkers.length)
		nextMediasoupWorkerIdx = 0;

	return worker;
}


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;服务端roomjs创建房间成功后执行roomhandleconnection创建peer&quot;&gt;服务端Room.js创建房间成功后,执行room.handleConnection，创建Peer&lt;/h3&gt;

&lt;h3 id=&quot;peer创建成功后执行peer_handlepeer创建一个peer对象&quot;&gt;peer创建成功后执行peer._handlePeer(),创建一个peer对象，&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_handlePeer({ peer, consume })
	{
		logger.debug('_handlePeer() [peer:&quot;%s&quot;]', peer.id);

		peer.data = {};

		// Not joined after a custom protoo 'join' request is later received.
		peer.data.consume = consume;
		peer.data.joined = false;
		peer.data.displayName = undefined;
		peer.data.device = undefined;
		peer.data.rtpCapabilities = undefined;
		peer.data.raiseHandState = false;

		// Have mediasoup related maps ready even before the Peer joins since we
		// allow creating Transports before joining.
		peer.data.transports = new Map();
		peer.data.producers = new Map();
		peer.data.consumers = new Map();

		peer.socket.on('request', (request, cb) =&amp;gt;
		{
			logger.debug(
				'Peer &quot;request&quot; event [method:%s, peerId:%s]',
				request.method, peer.id);

			this._handleSocketRequest(peer, request, cb)
				.catch((error) =&amp;gt;
				{
					logger.error('request failed:%o', error);

					cb(error);
				});
		});

		peer.socket.on('disconnect', () =&amp;gt;
		{
			if (this._closed)
				return;

			logger.debug('Peer &quot;close&quot; event [peerId:%s]', peer.id);

			// If the Peer was joined, notify all Peers.
			if (peer.data.joined)
			{
				this._notification(peer.socket, 'peerClosed', { peerId: peer.id }, true);
			}

			const index = this._lastN.indexOf(peer.id);

			if (index &amp;gt; -1) // We have this peer in the list, remove
			{
				this._lastN.splice(index, 1);
			}

			// Iterate and close all mediasoup Transport associated to this Peer, so all
			// its Producers and Consumers will also be closed.
			for (const transport of peer.data.transports.values())
			{
				transport.close();
			}

			this._peers.delete(peer.id);

			// If this is the latest Peer in the room, close the room after a while.
			if (this._peers.size === 0)
			{
				setTimeout(() =&amp;gt;
				{
					if (this._closed)
						return;

					if (this._peers.size === 0)
					{
						logger.info(
							'last Peer in the room left, closing the room [roomId:%s]',
							this._roomId);

						this.close();
					}
				}, 10000);
			}
		});
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;工作流程&quot;&gt;工作流程&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;浏览器端通过join方法使用socket.io-client，发送connection命令，&lt;/li&gt;
  &lt;li&gt;服务端通过监听connection命令，创建mediasoupWorker,&lt;/li&gt;
  &lt;li&gt;然后在创建room和mediasoupRouter,&lt;/li&gt;
  &lt;li&gt;然后在创建Peer&lt;/li&gt;
  &lt;li&gt;然后通过socket.io发送给浏览器端roomReady命令&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ecmscript6-es6知识点&quot;&gt;ecmscript6 es6知识点&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;new Map();&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
const rooms = new Map();
rooms.has(roomId)
rooms.get(roomId)
rooms.set(roomId, room);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;export default class RoomClient{} //在创建JavaScript模块时，export 语句用于从模块中导出函数、对象或原始值，以便其他程序可以通过 import 语句使用它们。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;static function(){} //静态方法不能用 new 实例调用&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;… Spread syntax展开语法return (…args) =&amp;gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zhao Q.H.</name></author><category term="mediasoup" /><category term="mediasoup" /><summary type="html">learning mediasoup A WebRTC SFU for Node.js</summary></entry><entry><title type="html">使用video.js播放dash、m3u8、mp4视频文件。</title><link href="http://localhost:4000/videojs/2019/09/26/videojs-play-dash-m3u8-mp4/" rel="alternate" type="text/html" title="使用video.js播放dash、m3u8、mp4视频文件。" /><published>2019-09-26T00:00:00+08:00</published><updated>2019-09-26T00:00:00+08:00</updated><id>http://localhost:4000/videojs/2019/09/26/videojs-play-dash-m3u8-mp4</id><content type="html" xml:base="http://localhost:4000/videojs/2019/09/26/videojs-play-dash-m3u8-mp4/">&lt;p&gt;使用video.js播放dash、m3u8、mp4视频文件。&lt;/p&gt;

&lt;h2 id=&quot;videojs播放mp4&quot;&gt;video.js播放Mp4&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;head&amp;gt;
  &amp;lt;link href=&quot;https://vjs.zencdn.net/7.6.5/video-js.css&quot; rel=&quot;stylesheet&quot;&amp;gt;

  &amp;lt;!-- If you'd like to support IE8 (for Video.js versions prior to v7) --&amp;gt;
  &amp;lt;script src=&quot;https://vjs.zencdn.net/ie8/1.1.2/videojs-ie8.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
  &amp;lt;video id='my-video' class='video-js' controls preload='auto' width='640' height='264'
  poster='MY_VIDEO_POSTER.jpg' data-setup='{}'&amp;gt;
    &amp;lt;source src='MY_VIDEO.mp4' type='video/mp4'&amp;gt;
    &amp;lt;source src='MY_VIDEO.webm' type='video/webm'&amp;gt;
    &amp;lt;p class='vjs-no-js'&amp;gt;
      To view this video please enable JavaScript, and consider upgrading to a web browser that
      &amp;lt;a href='https://videojs.com/html5-video-support/' target='_blank'&amp;gt;supports HTML5 video&amp;lt;/a&amp;gt;
    &amp;lt;/p&amp;gt;
  &amp;lt;/video&amp;gt;

  &amp;lt;script src='https://vjs.zencdn.net/7.6.5/video.js'&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;videojs播放mpeg-dash&quot;&gt;video.js播放MPEG-DASH&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;video id=example-video width=600 height=300 class=&quot;video-js vjs-default-skin&quot; controls&amp;gt; &amp;lt;/video&amp;gt;

&amp;lt;script src=&quot;video.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;dash.all.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;videojs-dash.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
  var player = videojs('example-video');
  player.src({ src: 'https://example.com/dash.mpd', type: 'application/dash+xml'});
  player.play();
&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;videojs播放m3u8&quot;&gt;video.js播放M3U8&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;video id=example-video width=960 height=540 class=&quot;video-js vjs-default-skin&quot; controls&amp;gt;
  &amp;lt;source
     src=&quot;https://example.com/index.m3u8&quot;
     type=&quot;application/x-mpegURL&quot;&amp;gt;
&amp;lt;/video&amp;gt;
&amp;lt;script src=&quot;video.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;videojs.hls.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
var player = videojs('example-video');
player.play();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;下载资源链接&quot;&gt;下载资源链接&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/videojs/video.js/tags&quot;&gt;video.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Dash-Industry-Forum/dash.js/tags&quot;&gt;dash.all.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/videojs/videojs-contrib-dash/tags&quot;&gt;videojs-dash.min.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/videojs/videojs-contrib-hls/tags&quot;&gt;videojs-hls.min.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.videojs.com/tutorial-setup.html&quot;&gt;Video.js Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://videojs.github.io/videojs-contrib-dash/&quot;&gt;VideoJS MPEG-DASH博客=&amp;gt;https://videojs.github.io/videojs-contrib-dash/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://videojs.github.io/videojs-contrib-hls/&quot;&gt;VideoJS m3u8博客=&amp;gt;https://videojs.github.io/videojs-contrib-hls/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zhao Q.H.</name></author><category term="videojs" /><category term="videojs" /><summary type="html">使用video.js播放dash、m3u8、mp4视频文件。</summary></entry><entry><title type="html">mysql 储存 emoji表情符</title><link href="http://localhost:4000/mysql/2019/09/25/emoji-utf8mb4/" rel="alternate" type="text/html" title="mysql 储存 emoji表情符" /><published>2019-09-25T00:00:00+08:00</published><updated>2019-09-25T00:00:00+08:00</updated><id>http://localhost:4000/mysql/2019/09/25/emoji-utf8mb4</id><content type="html" xml:base="http://localhost:4000/mysql/2019/09/25/emoji-utf8mb4/">&lt;p&gt;mysql使用utf8mb4储存emoji表情符，mysql odbc driver 不兼容utf8mb4&lt;/p&gt;

&lt;h2 id=&quot;unicode简介&quot;&gt;Unicode简介&lt;/h2&gt;

&lt;p&gt;Unicode（中文：万国码、国际码、统一码、单一码）是计算机科学领域里的一项业界标准。它对世界上大部分的文字系统进行了整理、编码，使得计算机可以用更为简单的方式来呈现和处理文字。
位于美国加州的Unicode组织允许任何愿意支付会费的公司和个人加入，其成员包含了主要的计算机软硬件厂商，例如Adobe系统、苹果公司、惠普、IBM、微软、施乐等。
Unicode 自版本 2.0 开始保持了向后兼容，即新的版本仅仅增加字符，原有字符不会被删除或更名。目前版本是Unicode 12.1,
统一码联盟在 1991 年首次发布了 The Unicode Standard。Unicode 的开发结合了国际标准化组织所制定的 ISO/IEC 10646，即通用字符集。
基本多文种平面的字符的编码为 U+hhhh，其中每个 h 代表一个十六进制数字&lt;/p&gt;

&lt;h2 id=&quot;emoji表情符简介&quot;&gt;emoji表情符简介&lt;/h2&gt;

&lt;p&gt;emoji（英语：emoji，日语：絵文字／えもじ emoji），最早由栗田穰崇（Shigetaka Kurita）创作,是一种形象化的符号，包括人的面部表情、肢体动作、各种动物、各种植物、各种食物、各种体育活动、各种交通工具、各种交通标志、各种国旗等形象化符号的总称。
2010年10月发布的Unicode 6.0版首次收录emoji编码。&lt;/p&gt;

&lt;h2 id=&quot;emoji储存到mysql&quot;&gt;emoji储存到mysql&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;utf8_unicode_ci和utf8mb4_unicode_ci的异同
这两种collations所对应的字符都是UTF-8编码的一个子集。utf8_unicode_ci最多能找到3个字节的Unicode编码，而utf8mb4_unicode_ci则能找到4个字节的编码。由于调整后的UTF-8编码格式规定最多使用4字节（原来是6字节）编码，所以utf8mb4系列可以说是覆盖了整个Unicode编码。
由于utf8_unicode_ci最多能找到3个字节的编码，意味着它只支持BMP中的字符，对于SMP与SIP以及其他头一字节不为0x00、需要4字节编码的planes来说，utf8_unicode_ci这种collation是无法支持。当使用4字节的字符（如emoji与B区以后的统一汉字）对使用此种collation的字段进行增删查改时，数据库会报一个非法字符的异常。而utf8mb4则没有此问题。由此也看出，utf8mb4_unicode_ci是utf8_unicode_ci的超集。
emoji储存到数据库需要4个字节bytes,需要字段的字符集设置成为utf8mb4，&lt;/li&gt;
  &lt;li&gt;设置字段字符集为utf8mb4，字符集校对utf8mb4_unicode_ci&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mysql配置和修改字符集&quot;&gt;mysql配置和修改字符集&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;如果是已经存在的项目，现在存在的数据表和未来创建的数据表每个字段都支持4个字节(emoji)的存储，那么需要修改修改配置文件、已存在的数据库字符集、数据表字符集、字段字符集&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;修改mysql配置文件&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[client]
no-beep
default-character-set = utf8mb4
# pipe
# socket=0.0
port=7349

[mysql]
no-beep

#default-character-set=utf8
default-character-set = utf8mb4

[mysqld]

#character-set-server=utf8
character-set-server = utf8mb4
collation-server = utf8mb4_unicode_ci
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;修改数据库的字符集&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ALTER SCHEMA `lti`  DEFAULT CHARACTER SET utf8mb4  DEFAULT COLLATE utf8mb4_unicode_ci ;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;修改表的字符集&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ALTER TABLE `lti`.`item` CHARACTER SET = utf8mb4 , COLLATE = utf8mb4_unicode_ci ;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;修改字段的字符集&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ALTER TABLE `lti`.`item` CHANGE COLUMN `item_text` `item_text` TEXT CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_unicode_ci' NULL DEFAULT NULL ;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;如果只需要某个字段支持emoji4字节存储，可以直接修改这个字段的字符集就可以了，不用修改配置文件等。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ALTER TABLE `lti`.`item` CHANGE COLUMN `item_text` `item_text` TEXT CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_unicode_ci' NULL DEFAULT NULL ;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;mysql-odbc-driver-不兼容utf8mb4&quot;&gt;mysql odbc driver 不兼容utf8mb4&lt;/h2&gt;
&lt;p&gt;如果服务端脚本语言Asp使用的mysql odbc driver操作数据库，涉及到utf8mb4的字段会出现错误，试过了很多版本的mysql-connector-odbc-8.0.x-winx64.msi都不可以，最后安装使用mariadb-connector-odbc-3.0.9-win64,解决了odbcd dirver不兼容utf8mb4的问题&lt;br /&gt;
其他服务端脚本语言PHP没有使用mysql odbc driver没有发现问题。&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://downloads.mariadb.org/connector-odbc/3.0.9/&quot;&gt;mariadb odbc driver 3.0.9&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://downloads.mysql.com/archives/c-odbc/&quot;&gt;mysql odbc driver 历史版本&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/Unicode#%E6%A8%99%E6%BA%96&quot;&gt;Unicode 维基百科&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%B9%AA%E6%96%87%E5%AD%97&quot;&gt;emoji 维基百科&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://apps.timwhitlock.info/emoji/tables/unicode&quot;&gt;emoji unicode UTF-8 =&amp;gt; https://apps.timwhitlock.info/emoji/tables/unicode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zhao Q.H.</name></author><category term="mysql" /><category term="mysql" /><summary type="html">mysql使用utf8mb4储存emoji表情符，mysql odbc driver 不兼容utf8mb4</summary></entry></feed>