<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-01-23T00:46:36+08:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">Zhao Q.H.’s Notes</title><subtitle>Keep It Simple, Stupid</subtitle><author><name>Zhao Q.H.</name></author><entry><title type="html">Laravel 安装</title><link href="http://localhost:4000/php/laravel/2021/01/23/laravel-install/" rel="alternate" type="text/html" title="Laravel 安装" /><published>2021-01-23T00:00:00+08:00</published><updated>2021-01-23T00:00:00+08:00</updated><id>http://localhost:4000/php/laravel/2021/01/23/laravel-install</id><content type="html" xml:base="http://localhost:4000/php/laravel/2021/01/23/laravel-install/">&lt;h3 id=&quot;composer全量镜像配置&quot;&gt;Composer全量镜像配置&lt;/h3&gt;
&lt;p&gt;由于国内用户访问Composer镜像的官方网站，在使用php的包管理工具Composer安装时，可能会下载安装的很慢，或者下载安装失败。
推荐使用国内阿里云镜像&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/ #全局安装
composer config -g --unset repos.packagist #取消配置

composer config repo.packagist composer https://mirrors.aliyun.com/composer/ #单个项目局部配置
composer config --unset repos.packagist #单个项目局部取消配置
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;安装最新版本laravel&quot;&gt;安装最新版本laravel&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /Users/zhaoqhu/www/
mkdir laravel_last #创建文件夹
composer create-project   laravel/laravel  ./  #安装laravel最新版本的框架到当前目录
php artisan #查看laravel框架的版本，目前的最新版本是8.24.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;安装指定版本laravel&quot;&gt;安装指定版本laravel&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /Users/zhaoqhu/www/
mkdir laravel_7_30_4
composer create-project   laravel/laravel ./   &quot;7.30.*&quot;;
php artisan 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;github下载laravel指定版本压缩包解压安装&quot;&gt;Github下载laravel指定版本压缩包解压安装&lt;/h3&gt;
&lt;p&gt;访问Github上对应的版本&lt;a href=&quot;https://github.com/laravel/laravel/archive/v7.30.0.zip&quot;&gt;https://github.com/laravel/laravel/archive/v7.30.0.zip&lt;/a&gt;,然后下载到本地电脑，然后解压，然后进入7.30.0目录&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unzip v7.30.0 
cd laravel-7.30.0
composer install #安装
php artisan -V #查看版本
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;使用-laravel命令行工具安装&quot;&gt;使用 laravel命令行工具安装&lt;/h3&gt;
&lt;p&gt;查看composer的home所在的目录，通过下面的命令，然后找到[home] /Users/zhaoqhu/.composer&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;composer global require laravel/installer #安装laravel命令行工具
composer config -l #查看composer配置
cd ~/.composer/vendor/bin#查看laravel命令行工具是否存在
 ~/.composer/vendor/bin/laravel new example-app; #安装
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;参考教程&quot;&gt;参考教程&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://laravel.com/docs/8.x/installation#installation-via-composer&quot;&gt;larave Composer安装方式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.aliyun.com/composer&quot;&gt; 阿里云 Composer 全量镜像&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pkg.phpcomposer.com/&quot;&gt;中国全量镜像&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zhao Q.H.</name></author><summary type="html">Composer全量镜像配置 由于国内用户访问Composer镜像的官方网站，在使用php的包管理工具Composer安装时，可能会下载安装的很慢，或者下载安装失败。 推荐使用国内阿里云镜像 ``` composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/ #全局安装 composer config -g –unset repos.packagist #取消配置</summary></entry><entry><title type="html">Vue CLI学习笔记</title><link href="http://localhost:4000/vue/2019/12/09/vue-cli-learning/" rel="alternate" type="text/html" title="Vue CLI学习笔记" /><published>2019-12-09T00:00:00+08:00</published><updated>2019-12-09T00:00:00+08:00</updated><id>http://localhost:4000/vue/2019/12/09/vue-cli-learning</id><content type="html" xml:base="http://localhost:4000/vue/2019/12/09/vue-cli-learning/">&lt;p&gt;Vue CLI、Vue GUI、vue-cli-service、vue-router、vue-loader&lt;/p&gt;

&lt;h2 id=&quot;vue-cli&quot;&gt;Vue CLI&lt;/h2&gt;

&lt;h3 id=&quot;安装&quot;&gt;安装&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Node 版本要求&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vue CLI 需要 Node.js 8.9 或更高版本 (推荐 8.11.0+)。你可以使用 nvm 或 nvm-windows 在同一台电脑中管理多个 Node 版本。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install -g @vue/cli
# OR
yarn global add @vue/cli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;检查vue是否安装成功&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vue --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;创建项目&quot;&gt;创建项目&lt;/h3&gt;

&lt;h4 id=&quot;vue-create&quot;&gt;vue create&lt;/h4&gt;

&lt;h4 id=&quot;vue-ui&quot;&gt;vue ui&lt;/h4&gt;

&lt;p&gt;这种是使用图形界面来创建项目，在命令行执行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vue ui
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;成功后浏览器会弹出一个http://localhost:8000的图形管理界面GUI&lt;/p&gt;

&lt;h2 id=&quot;vue-gui&quot;&gt;Vue GUI&lt;/h2&gt;

&lt;p&gt;在命令行中执行vue ui 成功后，用浏览器打开&lt;a href=&quot;http://localhost:8000&quot;&gt;Vue GUI&lt;/a&gt;,使用Vue GUI创建项目、管理项目、管理serve、编译项目build等。&lt;/p&gt;

&lt;h3 id=&quot;创建项目-1&quot;&gt;创建项目&lt;/h3&gt;

&lt;h3 id=&quot;管理项目&quot;&gt;管理项目&lt;/h3&gt;

&lt;h3 id=&quot;启动开发serve&quot;&gt;启动开发serve&lt;/h3&gt;

&lt;p&gt;任务=&amp;gt;serve=&amp;gt;启动，等同于在命令行中执行下面的命令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npx vue-cli-service serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;编译项目&quot;&gt;编译项目&lt;/h3&gt;

&lt;p&gt;任务=&amp;gt;build=&amp;gt;运行，等同于在命令行中执行下面的命令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npx vue-cli-service build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;检查webpack配置&quot;&gt;检查Webpack配置&lt;/h3&gt;

&lt;p&gt;任务=&amp;gt;inspect=&amp;gt;运行&lt;/p&gt;

&lt;h2 id=&quot;vue-cli配置&quot;&gt;Vue CLI配置&lt;/h2&gt;

&lt;p&gt;在package.json文件的同目录下创建vue.config.js&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module.exports = {
	configureWebpack: {
		entry: './src/main3223.js'//配置项目入口文件，默认的名称是main.js
	}
	pages: {
		about: {
			entry: 'src/pages/about/main.js',
			template: 'public/about.html',
			filename: 'about.html'
		},
		index: {
			entry: 'src/pages/index/main.js',
			template: 'public/index.html',
			filename: 'index.html'
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;vue-cli服务&quot;&gt;Vue CLI服务&lt;/h2&gt;

&lt;p&gt;在一个 Vue CLI 项目中，@vue/cli-service 安装了一个名为 vue-cli-service 的命令。常用的vue-cliservice的命令有serve、build、inspect。&lt;/p&gt;

&lt;p&gt;package.json中配置vue-cli-service如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;scripts&quot;: {
    &quot;serve&quot;: &quot;vue-cli-service serve&quot;,
    &quot;build&quot;: &quot;vue-cli-service build&quot;,
    &quot;inspect&quot;: &quot;vue-cli-service inspect&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用npm可以执行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run serve //开启serve
npm run build //编译项目
npm run inspect //审查webconfig配置文件
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;vue-router&quot;&gt;Vue Router&lt;/h2&gt;

&lt;p&gt;使用Vue GUI安装cli-plugin-router，会在原有的项目目录中生成以下目录和文件&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;/src/router/index.js&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import Vue from 'vue'
import VueRouter from 'vue-router'
import Home from '../views/Home.vue'

Vue.use(VueRouter)

const routes = [
  {
    path: '/',
    name: 'home',
    component: Home
  },
  {
    path: '/about',
    name: 'about',
    // route level code-splitting
    // this generates a separate chunk (about.[hash].js) for this route
    // which is lazy-loaded when the route is visited.
    component: () =&amp;gt; import(/* webpackChunkName: &quot;about&quot; */ '../views/About.vue')
  }
]

const router = new VueRouter({
	mode: 'history',
  routes
})

export default router

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;/src/views/About.view&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;/src/views/Home.view&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;vue-loader&quot;&gt;Vue Loader&lt;/h2&gt;

&lt;h2 id=&quot;vue-cli插件&quot;&gt;Vue CLI插件&lt;/h2&gt;

&lt;h2 id=&quot;vue-ui-framework&quot;&gt;Vue UI Framework&lt;/h2&gt;
&lt;p&gt;Vue UI框架&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://element.eleme.io/#/zh-CN/component/button&quot;&gt;Element UI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vuetifyjs.com/zh-Hans/&quot;&gt;Vuetify&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vuematerial.io/components/button&quot;&gt;Vue Material&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vue使用记录&quot;&gt;Vue使用记录&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;.vue文件不能使用node.js的fs模块&lt;/li&gt;
  &lt;li&gt;import 和 export不能出现在代码块中，如果需要在代码块中引入文件，使用require&lt;/li&gt;
  &lt;li&gt;在App.vue组件中触发子组件中所定义的ref对应的v-on:click(“enterFull”)事件&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;this.$refs.routerView.$children[5].$refs.enterFullScreen.click();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Chrome 浏览器在使用Element.requestFullscreen()方法时，如果不是手动触发点击事件的会报错&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;failed to execute 'requestfullscreen' on 'element': api can only be initiated by a user gesture.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cn.vuejs.org/&quot;&gt;Vue.js 文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cli.vuejs.org/zh/&quot;&gt;Vue CLI 文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cli.vuejs.org/zh/config/&quot;&gt;vue.config.js配置文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://router.vuejs.org/zh/&quot;&gt;vue-router文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vue-loader.vuejs.org/zh/&quot;&gt;vue-loader文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://webpack.js.org/configuration/&quot;&gt;webpack配置文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zhao Q.H.</name></author><category term="vue" /><summary type="html">Vue CLI、Vue GUI、vue-cli-service、vue-router、vue-loader</summary></entry><entry><title type="html">Vue.js 学习笔记</title><link href="http://localhost:4000/vue/2019/12/02/vue-js-learning/" rel="alternate" type="text/html" title="Vue.js 学习笔记" /><published>2019-12-02T00:00:00+08:00</published><updated>2019-12-02T00:00:00+08:00</updated><id>http://localhost:4000/vue/2019/12/02/vue-js-learning</id><content type="html" xml:base="http://localhost:4000/vue/2019/12/02/vue-js-learning/">&lt;p&gt;直接在HTML页面 &amp;lt;script&amp;gt;引入的方式&lt;/p&gt;

&lt;h2 id=&quot;vuejs-视频学习&quot;&gt;vue.js 视频学习&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://learning.dcloud.io/#/?vid=0&quot;&gt;学习视频网址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;

&lt;h3 id=&quot;直接用-script-引入&quot;&gt;直接用 &amp;lt;script&amp;gt; 引入&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://cn.vuejs.org/js/vue.js&quot;&gt;开发版本&lt;/a&gt;包含完整的警告和调试模式&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cn.vuejs.org/js/vue.min.js&quot;&gt;生产版本&lt;/a&gt;删除了警告，33.30KB min+gzip&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;npm&quot;&gt;NPM&lt;/h3&gt;

&lt;h3 id=&quot;命令行工具-cli&quot;&gt;命令行工具 (CLI)&lt;/h3&gt;

&lt;h2 id=&quot;vue实例&quot;&gt;Vue实例&lt;/h2&gt;

&lt;h3 id=&quot;创建一个实例&quot;&gt;创建一个实例&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var vm = new Vue({
  // 选项
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;数据与方法&quot;&gt;数据与方法&lt;/h3&gt;

&lt;p&gt;除了数据属性，Vue 实例还暴露了一些有用的实例属性与方法。它们都有前缀 $，以便与用户定义的属性区分开来。例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var data = { a: 1 }
var vm = new Vue({
  el: '#example',
  data: data
})

vm.$data === data // =&amp;gt; true
vm.$el === document.getElementById('example') // =&amp;gt; true

// $watch 是一个实例方法
vm.$watch('a', function (newValue, oldValue) {
  // 这个回调将在 `vm.a` 改变后调用
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;实例生命周期钩子&quot;&gt;实例生命周期钩子&lt;/h3&gt;

&lt;p&gt;每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。&lt;/p&gt;

&lt;p&gt;比如 created 钩子可以用来在一个实例被创建之后执行代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;new Vue({
  data: {
    a: 1
  },
  created: function () {
    // `this` 指向 vm 实例
    console.log('a is: ' + this.a)
  }
})
// =&amp;gt; &quot;a is: 1&quot;``
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;vue自定义实例&quot;&gt;Vue自定义实例&lt;/h3&gt;

&lt;p&gt;下面的这个Vue实例，包含了&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;数据data&lt;/li&gt;
  &lt;li&gt;自定义的方法click1、click2,&lt;/li&gt;
  &lt;li&gt;实例生命周期的钩子beforeCreate、created、beforeMount等&lt;/li&gt;
  &lt;li&gt;Vue实例的方法$watch&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var vm = new Vue({
	el: '#app', 
	data: {
		msg:'hello Vue',
		author:{name:'Zhaoqhu'},
		rawHtml:'&amp;lt;span style='color:red'&amp;gt;;this is a html span &amp;lt;/span&amp;gt;',
		color:'red',
		number: 10,
		ok: false,
		strArr: 'vue',
		isShowMe: false,
		hrefOrg: 'https://cn.vuejs.org/v2/guide/syntax.html#%E5%8F%82%E6%95%B0',
		clsClickTest: 'div-click-test',
		isClsRed: true
	},
	methods:{
		click1: function(){
			console.log('click 1');
		},
		click2: function(){
			console.log('click2');
		}
	},
	beforeCreate: function(){
		console.log('beforeCreate');
	},
	created: function(){
		console.log('created');
	},
	beforeMount: function(){
		console.log('beforemount');
	},
	mounted: function(){
		console.log('mounted');
	},
	beforeUpdate: function(){
		console.log('beforeupdate');
	},
	updated: function(){
		console.log('updated');
	}
	
});
data.author.name='zhao Q.H.';
	console.log(vm);
	console.log(data);
	vm.$watch('a',function(newVal,oldVal){
		console.log(newVal,oldVal);
	});
setTimeout(function(){
	vm.$data.msg = &quot;hello vue223&quot;;
},5000);
console.log(vm.$data.strArr.split('').reverse().join(''));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;模版语法&quot;&gt;模版语法&lt;/h2&gt;

&lt;h3 id=&quot;插值&quot;&gt;插值&lt;/h3&gt;

&lt;h4 id=&quot;文本&quot;&gt;文本&lt;/h4&gt;

&lt;p&gt;数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&amp;lt;div id=&quot;app&quot;&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;原始html&quot;&gt;原始HTML&lt;/h4&gt;

&lt;p&gt;双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用 v-html 指令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div id=&quot;app&quot;&amp;gt;
&amp;lt;p id=&quot;rawHtmlA&quot; v-html=&quot;rawHtml&quot;&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;特性&quot;&gt;特性&lt;/h4&gt;

&lt;p&gt;Mustache 语法不能作用在 HTML 特性上，HTML特性是指 id、class、href、title等遇到这种情况应该使用 v-bind 指令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div v-bind:class=&quot;color&quot;&amp;gt;hello red&amp;lt;/div&amp;gt;
&amp;lt;a v-bind:href=&quot;hrefOrg&quot;&amp;gt;跳转到官网&amp;lt;/a&amp;gt;
&amp;lt;div class=&quot;mar-top-30 font-30&quot; v-bind:class=&quot;{fontRed:isClsRed}&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;使用javascript表达式&quot;&gt;使用Javascript表达式&lt;/h4&gt;

&lt;p&gt;迄今为止，在我们的模板中，我们一直都只绑定简单的属性键值。但实际上，对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&amp;lt;p&amp;gt;{{ number+1 }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;{{ ok ? 'YES' : 'NO' }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;{{ strArr.split('').reverse().join('') }}&amp;lt;/p&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;指令&quot;&gt;指令&lt;/h3&gt;

&lt;p&gt;指令 (Directives) 是带有 v- 前缀的特殊特性。指令特性的值预期是单个 JavaScript 表达式 (v-for 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。回顾我们在介绍中看到的例子：&lt;/p&gt;

&lt;h4 id=&quot;参数&quot;&gt;参数&lt;/h4&gt;

&lt;p&gt;一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，v-bind 指令可以用于响应式地更新 HTML 特性：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a v-bind:href=&quot;hrefOrg&quot;&amp;gt;跳转到官网&amp;lt;/a&amp;gt;
&amp;lt;div v-bind:class=&quot;clsClickTest&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;动态参数&quot;&gt;动态参数&lt;/h4&gt;

&lt;p&gt;attributeName为动态参数，attributeValue为动态参数值&lt;br /&gt;
eventName为动态参数,eventMethod为动态参数的静态方法&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a v-bind:[attributeName]=&quot;attributeValue&quot;&amp;gt;HTML动态属性和属性值&amp;lt;/a&amp;gt;
&amp;lt;a v-on:[eventName]=&quot;eventMethod&quot;&amp;gt;HTML动态事件和动态方法&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;修饰符&quot;&gt;修饰符&lt;/h4&gt;

&lt;p&gt;修饰符 (modifier) 是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div @click=&quot;click1&quot; v-bind:class=&quot;clsClickTest&quot;&amp;gt;
	&amp;lt;div v-on:click.stop=&quot;click2&quot;&amp;gt;
	click me
	&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;缩写&quot;&gt;缩写&lt;/h3&gt;

&lt;p&gt;v- 前缀作为一种视觉提示，用来识别模板中 Vue 特定的特性。当你在使用 Vue.js 为现有标签添加动态行为 (dynamic behavior) 时，v- 前缀很有帮助，然而，对于一些频繁用到的指令来说，就会感到使用繁琐。同时，在构建由 Vue 管理所有模板的单页面应用程序 (SPA - single page application) 时，v- 前缀也变得没那么重要了。因此，Vue 为 v-bind 和 v-on 这两个最常用的指令，提供了特定简写：&lt;/p&gt;

&lt;h4 id=&quot;v-bind缩写&quot;&gt;v-bind缩写&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!-- 完整语法 --&amp;gt;
&amp;lt;a v-bind:href=&quot;url&quot;&amp;gt;...&amp;lt;/a&amp;gt;

&amp;lt;!-- 缩写 --&amp;gt;
&amp;lt;a :href=&quot;url&quot;&amp;gt;...&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;v-on缩写&quot;&gt;v-on缩写&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!-- 完整语法 --&amp;gt;
&amp;lt;a v-on:click=&quot;doSomething&quot;&amp;gt;...&amp;lt;/a&amp;gt;

&amp;lt;!-- 缩写 --&amp;gt;
&amp;lt;a @click=&quot;doSomething&quot;&amp;gt;...&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;计算属性&quot;&gt;计算属性&lt;/h2&gt;

&lt;p&gt;模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护。例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div id=&quot;example&quot;&amp;gt;
  {{ message.split('').reverse().join('') }}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在这个地方，模板不再是简单的声明式逻辑。你必须看一段时间才能意识到，这里是想要显示变量 message 的翻转字符串。当你想要在模板中多次引用此处的翻转字符串时，就会更加难以处理。&lt;/p&gt;

&lt;p&gt;所以，对于任何复杂逻辑，你都应当使用计算属性。&lt;/p&gt;

&lt;h3 id=&quot;基础例子&quot;&gt;基础例子&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div id=&quot;example&quot;&amp;gt;
  &amp;lt;p&amp;gt;Original message: &quot;{{ message }}&quot;&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;Computed reversed message: &quot;{{ reversedMessage }}&quot;&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;

var vm = new Vue({
  el: '#example',
  data: {
    message: 'Hello'
  },
  computed: {
    // 计算属性的 getter
    reversedMessage: function () {
      // `this` 指向 vm 实例
      return this.message.split('').reverse().join('')
    }
  }
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;计算属性缓存vs方法&quot;&gt;计算属性缓存vs方法&lt;/h3&gt;

&lt;h3 id=&quot;计算属性vs侦听属性&quot;&gt;计算属性vs侦听属性&lt;/h3&gt;

&lt;h3 id=&quot;计算属性的setter&quot;&gt;计算属性的setter&lt;/h3&gt;

&lt;h3 id=&quot;侦听器&quot;&gt;侦听器&lt;/h3&gt;

&lt;p&gt;虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 watch 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div id=&quot;watch-example&quot;&amp;gt;
  &amp;lt;p&amp;gt;
    Ask a yes/no question:
    &amp;lt;input v-model=&quot;question&quot;&amp;gt;
  &amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;{{ answer }}&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 --&amp;gt;
&amp;lt;!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 --&amp;gt;
&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
var watchExampleVM = new Vue({
  el: '#watch-example',
  data: {
    question: '',
    answer: 'I cannot give you an answer until you ask a question!'
  },
  watch: {
    // 如果 `question` 发生改变，这个函数就会运行
    question: function (newQuestion, oldQuestion) {
      this.answer = 'Waiting for you to stop typing...'
      this.debouncedGetAnswer()
    }
  },
  created: function () {
    // `_.debounce` 是一个通过 Lodash 限制操作频率的函数。
    // 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率
    // AJAX 请求直到用户输入完毕才会发出。想要了解更多关于
    // `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，
    // 请参考：https://lodash.com/docs#debounce
    this.debouncedGetAnswer = _.debounce(this.getAnswer, 500)
  },
  methods: {
    getAnswer: function () {
      if (this.question.indexOf('?') === -1) {
        this.answer = 'Questions usually contain a question mark. ;-)'
        return
      }
      this.answer = 'Thinking...'
      var vm = this
      axios.get('https://yesno.wtf/api')
        .then(function (response) {
          vm.answer = _.capitalize(response.data.answer)
        })
        .catch(function (error) {
          vm.answer = 'Error! Could not reach the API. ' + error
        })
    }
  }
})
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;练习代码&quot;&gt;练习代码&lt;/h2&gt;

&lt;h3 id=&quot;javascript代码&quot;&gt;Javascript代码&lt;/h3&gt;

&lt;p&gt;index.js&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;html代码&quot;&gt;HTML代码&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1368561&quot;&gt;jekyll转义特殊字符&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zhao Q.H.</name></author><category term="vue" /><summary type="html">直接在HTML页面 &amp;lt;script&amp;gt;引入的方式</summary></entry><entry><title type="html">OAuth2 service microsoft</title><link href="http://localhost:4000/oauth2/2019/11/25/oAuth-2-service-microsoft/" rel="alternate" type="text/html" title="OAuth2 service microsoft" /><published>2019-11-25T00:00:00+08:00</published><updated>2019-11-25T00:00:00+08:00</updated><id>http://localhost:4000/oauth2/2019/11/25/oAuth-2-service-microsoft</id><content type="html" xml:base="http://localhost:4000/oauth2/2019/11/25/oAuth-2-service-microsoft/">&lt;p&gt;在网站中添加第三方microsoft帐号登录功能，方法和步骤&lt;/p&gt;

&lt;h2 id=&quot;访问authorization_endpoint&quot;&gt;访问authorization_endpoint。&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;authorization_endpoint的链接地址为&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://login.microsoftonline.com/common/oauth2/v2.0/authorize?
client_id=4ec1c7f2-9e38-4b8e-8073-5e6b68da2162&amp;amp;
response_type=code&amp;amp;
redirect_uri=http://localhost/oauth/callback_microsoft.php&amp;amp;
response_mode=query&amp;amp;
scope=openid%20profile%20email%20user.read&amp;amp;
state=12345&amp;amp;
prompt=consent

authorization_endpoint链接参数解释
https://login.microsoftonline.com/common/oauth2/v2.0/authorize?
client_id=4ec1c7f2-9e38-4b8e-8073-5e6b68da2162&amp;amp; 
response_type=code&amp;amp;
redirect_uri=http://localhost/oauth/callback_microsoft.php&amp;amp;
response_mode=query&amp;amp;
scope=openid%20offline_access%20https%3A%2F%2Fgraph.microsoft.com%2Fuser.read&amp;amp; //scope值需要rawurlencode()
state=12345&amp;amp; //state值需要rawurlencode();这个参数值可以自定义，并且会自动返回附加到回调地址上，
prompt=consent//这个值，会使用户弹出一个登陆的界面
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;访问authorization_endpoint的方式&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用JS访问authorization_endpoint&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;window.location.href = &quot;
https://login.microsoftonline.com/common/oauth2/v2.0/authorize?
client_id=4ec1c7f2-9e38-4b8e-8073-5e6b68da2162&amp;amp;
response_type=code&amp;amp;
redirect_uri=http://localhost/oauth/callback_microsoft.php&amp;amp;
response_mode=query&amp;amp;
scope=openid%20profile%20email%20user.read&amp;amp;
state=12345&amp;amp;
prompt=consent
&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;*使用PHP访问authorization_endpoint&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;header(&quot;Location: https://login.microsoftonline.com/common/oauth2/v2.0/authorize?
client_id=4ec1c7f2-9e38-4b8e-8073-5e6b68da2162&amp;amp;
response_type=code&amp;amp;
redirect_uri=http://localhost/oauth/callback_microsoft.php&amp;amp;
response_mode=query&amp;amp;
scope=openid%20profile%20email%20user.read&amp;amp;
state=12345&amp;amp;
prompt=consent&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;访问token_endpoint&quot;&gt;访问token_endpoint。&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$url_token = &quot;https://login.microsoftonline.com/common/oauth2/v2.0/token&quot;;
$data['client_id'] = '4ec1c7f2-9e38-4b8e-8073-5e6b68da2162';
$scope = &quot;openid profile email user.read&quot;;
//$scope = &quot;&quot;;
$data['scope'] = $scope;
$data['code'] = $_GET['code'];//这个值是访问访问authorization_endpoint的URL后自动返回的
$data['redirect_uri'] = 'http://localhost/oauth/callback_microsoft.php';
$data['grant_type'] = 'authorization_code';
$data['client_secret'] = 'rlPw-4rgooGre:@8D?90p6py=LOPMG_0';
$res = post_url($url_token,$data);
$objToken = json_decode($res);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;访问userinfo_endpoint&quot;&gt;访问userinfo_endpoint&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$url_userinfo = &quot;https://graph.microsoft.com/v1.0/me&quot;;
$header[] = &quot;Authorization: &quot;.$objToken-&amp;gt;token_type.&quot; &quot;.$objToken-&amp;gt;access_token;
//var_dump($url_userinfo,$header);die;
$resUserInfo = get_url($url_userinfo,$header);
var_dump(666,$resUserInfo);die;

function get_url($url,$data){
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $url);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); 
	curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE); 
	curl_setopt($ch, CURLOPT_CUSTOMREQUEST,&quot;GET&quot;); 
	curl_setopt($ch, CURLOPT_HTTPHEADER, $data);
	curl_setopt($ch, CURLOPT_PROXY, '127.0.0.1');
	curl_setopt($ch, CURLOPT_PROXYPORT, '1080');
	$output = curl_exec($ch);
	if($output === false)
	  {
	      echo 'Curl error: ' . curl_error($ch);
	  }
	curl_close($ch);
	return $output;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;app-registrations创建步骤&quot;&gt;App registrations创建步骤&lt;/h2&gt;

&lt;p&gt;1、访问&lt;a href=&quot;https://portal.azure.com/#allservices&quot;&gt;https://portal.azure.com/#allservices&lt;/a&gt;&lt;br /&gt;
2、Identity=&amp;gt;App registrations=&amp;gt;New registration&lt;br /&gt;
3、registration主要参数有Application (client) ID，client secrect,创建方法选中已创建的registration=&amp;gt;Certificates &amp;amp; secrets=&amp;gt; New client secrect&lt;br /&gt;
4、开发过程中程序代码里client_id ，client_secret，redirect_uri，这三项的值，需要registration提供。&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow&quot;&gt;https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&amp;amp;tabs=http&quot;&gt;https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&amp;amp;tabs=http&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zhao Q.H.</name></author><category term="OAuth2" /><summary type="html">在网站中添加第三方microsoft帐号登录功能，方法和步骤</summary></entry><entry><title type="html">OAuth2 service google</title><link href="http://localhost:4000/oauth2/2019/10/29/oAuth-2-service-google/" rel="alternate" type="text/html" title="OAuth2 service google" /><published>2019-10-29T00:00:00+08:00</published><updated>2019-10-29T00:00:00+08:00</updated><id>http://localhost:4000/oauth2/2019/10/29/oAuth-2-service-google</id><content type="html" xml:base="http://localhost:4000/oauth2/2019/10/29/oAuth-2-service-google/">&lt;p&gt;在网站中添加第三方google帐号登录功能，方法和步骤&lt;/p&gt;

&lt;h2 id=&quot;访问authorization_endpoint&quot;&gt;访问authorization_endpoint。&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;authorization_endpoint的链接地址为&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://accounts.google.com/o/oauth2/v2/auth?
response_type=code&amp;amp;
scope=openid%20profile%20email&amp;amp;
redirect_uri=http://localhost/oauth/callback.php&amp;amp;
client_id=825260887949-tpka28ca3l4pacbjq83bdm1lnft58aga.apps.googleusercontent.com&amp;amp;
state=kwqrurwwlowpvnnprswlqxvwnsnwyymznrmupqsqvlpuumztvvdo&amp;amp;
access_type=offline&amp;amp;
prompt=consent

authorization_endpoint链接参数解释

https://accounts.google.com/o/oauth2/v2/auth?
response_type=code&amp;amp;
scope=openid%20profile%20email&amp;amp; //scope值需要rawurlencode()
redirect_uri=http://localhost/oauth/callback.php&amp;amp;//redirect_uri值需要rawurlencode()
client_id=825260887949-tpka28ca3l4pacbjq83bdm1lnft58aga.apps.googleusercontent.com&amp;amp;//client_id值需要rawurlencode()
state=kwqrurwwlowpvnnprswlqxvwnsnwyymznrmupqsqvlpuumztvvdo&amp;amp;//state值需要rawurlencode();这个参数值可以自定义，并且会自动返回附加到回调地址上，
access_type=offline&amp;amp;
prompt=consent//这个值，会使用户弹出一个登陆的界面
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;访问authorization_endpoint的方式&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用JS访问&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;window.location.href = https://accounts.google.com/o/oauth2/v2/auth?
response_type=code&amp;amp;
scope=openid%20profile%20email&amp;amp;
redirect_uri=http://localhost/oauth/callback.php&amp;amp;
client_id=825260887949-tpka28ca3l4pacbjq83bdm1lnft58aga.apps.googleusercontent.com&amp;amp;
state=kwqrurwwlowpvnnprswlqxvwnsnwyymznrmupqsqvlpuumztvvdo&amp;amp;
access_type=offline&amp;amp;
prompt=consent
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;使用PHP访问&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;header(&quot;Location: https://accounts.google.com/o/oauth2/v2/auth?
response_type=code&amp;amp;
scope=openid%20profile%20email&amp;amp;
redirect_uri=http://localhost/oauth/callback.php&amp;amp;
client_id=825260887949-tpka28ca3l4pacbjq83bdm1lnft58aga.apps.googleusercontent.com&amp;amp;
state=kwqrurwwlowpvnnprswlqxvwnsnwyymznrmupqsqvlpuumztvvdo&amp;amp;
access_type=offline&amp;amp;
prompt=consent&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;访问token_endpoint&quot;&gt;访问token_endpoint。&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$data = array();
$data['client_id'] = '825260887949-tpka28ca3l4pacbjq83bdm1lnft58aga.apps.googleusercontent.com';
$data['client_secret'] = 'CeTlkOnFl3stgkTT4JgcxbWC';
$data['grant_type'] = 'authorization_code';
$data['redirect_uri'] = 'http://localhost/oauth/callback.php';
$data['scope'] = '';
$data['code'] = trim($_GET['code']); //这个值是访问访问authorization_endpoint的URL后自动返回的

$url = 'https://www.googleapis.com/oauth2/v4/token';
$res = post_url($url,$data);
function post_url($url,$data){
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $url);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
	curl_setopt($ch, CURLOPT_SSL_VERIFYHOST,FALSE);
	curl_setopt($ch, CURLOPT_POST, 1);
	curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
	curl_setopt($ch, CURLOPT_PROXY, '127.0.0.1');
	curl_setopt($ch, CURLOPT_PROXYPORT, '1080');
	$output = curl_exec($ch);
	
  if($output === false)
  {
      echo 'Curl error: ' . curl_error($ch);
  }
  curl_close($ch);
	return $output;
 }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;访问userinfo_endpoint&quot;&gt;访问userinfo_endpoint&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$header[] = 'Authorization:'.$_SESSION['oauth2_google_token_type'].' '.$_SESSION['oauth2_google_access_token'];
$request_url = &quot;https://www.googleapis.com/oauth2/v2/userinfo&quot;;
$res = get_url($request_url,$header);
var_dump($res);die;
function get_url($url,$data){
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $url);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); 
	curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE); 
	curl_setopt($ch, CURLOPT_CUSTOMREQUEST,&quot;GET&quot;); 
	curl_setopt($ch, CURLOPT_HTTPHEADER, $data);
	//curl_setopt($ch, CURLOPT_PROXY, '127.0.0.1');
	//curl_setopt($ch, CURLOPT_PROXYPORT, '1080');
	$output = curl_exec($ch);
	if($output === false)
	  {
	      echo 'Curl error: ' . curl_error($ch);
	  }
	curl_close($ch);
	return $output;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;oauth-20-client-ids创建步骤&quot;&gt;OAuth 2.0 client IDs创建步骤&lt;/h2&gt;

&lt;p&gt;1、访问 &lt;a href=&quot;https://console.developers.google.com/&quot;&gt;Google API Console&lt;/a&gt;&lt;br /&gt;
2、project=&amp;gt;Credentials=&amp;gt;OAuth client ID=&amp;gt;Web application&lt;br /&gt;
3、OAuth 2.0 client ID的主要参数有Client ID，Client secrect，Authorized redirect URIs&lt;br /&gt;
4、开发过程中程序代码里client_id ，client_secret，redirect_uri，这三项的值，需要OAuth 2.0 client ID提供。&lt;/p&gt;

&lt;h2 id=&quot;google提供的在线使用api工具&quot;&gt;google提供的在线使用API工具&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://accounts.google.com/o/oauth2/v2/auth?
 scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.metadata.readonly&amp;amp;
 access_type=offline&amp;amp;
 include_granted_scopes=true&amp;amp;
 state=state_parameter_passthrough_value&amp;amp;
 redirect_uri=https://developers.google.com/oauthplayground&amp;amp;
 response_type=code&amp;amp;
 client_id=825260887949-tpka28ca3l4pacbjq83bdm1lnft58aga.apps.googleusercontent.com


参数解释
https://accounts.google.com/o/oauth2/v2/auth?
 scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.metadata.readonly&amp;amp;
 access_type=offline&amp;amp;
 include_granted_scopes=true&amp;amp;
 state=state_parameter_passthrough_value&amp;amp;//自定义我们网站里面需要使用的参数，会自动附加到回调地址上，
 redirect_uri=https://developers.google.com/oauthplayground&amp;amp; //这个是google提供的在线API工具地址，这个回调地址需要添加到credentials
 response_type=code&amp;amp;
 client_id=825260887949-tpka28ca3l4pacbjq83bdm1lnft58aga.apps.googleusercontent.com//这个是需要在google API console里创建credentials，然后在里面有client_id

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/oauthplayground/&quot;&gt;Google OAuth 2 API 在线工具&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/identity/protocols/OpenIDConnect&quot;&gt;https://developers.google.com/identity/protocols/OpenIDConnect&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zhao Q.H.</name></author><category term="OAuth2" /><summary type="html">在网站中添加第三方google帐号登录功能，方法和步骤</summary></entry><entry><title type="html">Ubuntu 14.04 lts 升级到 16.04 lts</title><link href="http://localhost:4000/linux/2019/10/11/ubuntu14.04-lts-to-16.04-lts/" rel="alternate" type="text/html" title="Ubuntu 14.04 lts 升级到 16.04 lts" /><published>2019-10-11T00:00:00+08:00</published><updated>2019-10-11T00:00:00+08:00</updated><id>http://localhost:4000/linux/2019/10/11/ubuntu14.04%20lts-to-16.04%20lts</id><content type="html" xml:base="http://localhost:4000/linux/2019/10/11/ubuntu14.04-lts-to-16.04-lts/">&lt;h2 id=&quot;故障描述&quot;&gt;故障描述&lt;/h2&gt;

&lt;p&gt;升级到16.04后，只有命令行模式，没有网络，apt-get命令失效，&lt;/p&gt;

&lt;h2 id=&quot;故障原因&quot;&gt;故障原因&lt;/h2&gt;

&lt;h2 id=&quot;解决方法&quot;&gt;解决方法&lt;/h2&gt;

&lt;p&gt;重启电脑，同时一直按”Esc”键，进入GRUB界面&lt;/p&gt;

&lt;h2 id=&quot;apt-get错误&quot;&gt;apt-get错误&lt;/h2&gt;

&lt;p&gt;apt: relocation error: version GLIBCXX_3.4.21 not defined in file libstdc++.so.6 with link time reference&lt;/p&gt;

&lt;p&gt;解决办法：需要网络可以正常访问外网，执行下面的命令&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ wget http://security.ubuntu.com/ubuntu/pool/main/g/gcc-5/libstdc++6_5.4.0-6ubuntu1~16.04.10_amd64.deb
sudo dpkg -i libstdc++6_5.4.0-6ubuntu1~16.04.10_amd64.deb

# I also found this helpful
$ sudo apt-get -f install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;命令行模式切换到图形界面模式&quot;&gt;命令行模式切换到图形界面模式&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ service lightdm start

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/davidhopper/article/details/79288573&quot;&gt;命令行模式切换到图形界面模式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://askubuntu.com/questions/777803/apt-relocation-error-version-glibcxx-3-4-21-not-defined-in-file-libstdc-so-6/792471&quot;&gt;apt-get报错解决办法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://juejin.im/post/5c11b6aee51d4570b57aff07&quot;&gt;修复ubuntu16.04，GRUB解决办法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zhao Q.H.</name></author><category term="linux" /><summary type="html">故障描述</summary></entry><entry><title type="html">chatroom</title><link href="http://localhost:4000/2019/10/09/chatroom/" rel="alternate" type="text/html" title="chatroom" /><published>2019-10-09T00:00:00+08:00</published><updated>2019-10-09T00:00:00+08:00</updated><id>http://localhost:4000/2019/10/09/chatroom</id><content type="html" xml:base="http://localhost:4000/2019/10/09/chatroom/">&lt;h1 id=&quot;登录&quot;&gt;登录&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;参数
  用户名：userName, 房间：roomId, 是否为主播：is_host&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;检查userName,roomId
  如果userName,roomId的值为空则返回错误的提示信息。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;检查某用户在某房间是否为主播
  例如：userName的值为zhaoQH,roomId的值为北京666,检查zhaoQH在北京666的房间是否为主播&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;检查某用户是否已在房间&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zhao Q.H.</name></author><summary type="html">登录</summary></entry><entry><title type="html">browserify</title><link href="http://localhost:4000/node.js/2019/10/08/Browserify-watchify/" rel="alternate" type="text/html" title="browserify" /><published>2019-10-08T00:00:00+08:00</published><updated>2019-10-08T00:00:00+08:00</updated><id>http://localhost:4000/node.js/2019/10/08/Browserify-watchify</id><content type="html" xml:base="http://localhost:4000/node.js/2019/10/08/Browserify-watchify/">&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;Browserify lets you require(‘modules’) in the browser by bundling up all of your dependencies.&lt;/p&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install -g browserify
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;使用一&quot;&gt;使用一&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Here is a tutorial on how to use Browserify on the command line to bundle up a simple file called main.js along with all of its dependencies: main.js&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var unique = require('uniq');

var data = [1, 2, 2, 3, 4, 5, 5, 5, 6];

console.log(unique(data));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Install the uniq module with npm:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install uniq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Now recursively bundle up all the required modules starting at main.js into a single file called bundle.js with the browserify command:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;browserify main.js -o bundle.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Browserify parses the AST for require() calls to traverse the entire dependency graph of your project.
Drop a single &amp;lt;script&amp;gt; tag into your html and you’re done!&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script src=&quot;bundle.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;使用二-browserify-watchify-socketio-client-jquery&quot;&gt;使用二 browserify, watchify, socket.io-client, jquery、&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;安装browserify , socket.io-client, watchify&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm i browserify --save-dev

$ npm install --save socket.io-client

$ npm i watchify --save-dev

$npm i --save jquery
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;package.json&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;name&quot;: &quot;app&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;&quot;,
  &quot;main&quot;: &quot;main.js&quot;,
  &quot;scripts&quot;: {
    &quot;build&quot;: &quot;browserify main.js -o ../server/public/bundle.js&quot;,
    &quot;watch&quot;: &quot;watchify main.js -o bundle.js&quot;
  },
  &quot;author&quot;: &quot;&quot;,
  &quot;license&quot;: &quot;ISC&quot;,
  &quot;dependencies&quot;: {
    &quot;socket.io-client&quot;: &quot;^2.3.0&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;main.js文件使用require引入js模块&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;执行命令，编译和监控文件&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm run build
$ npm run watch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://browserify.org/&quot;&gt;http://browserify.org/&lt;/a&gt;&lt;/p&gt;</content><author><name>Zhao Q.H.</name></author><category term="Node.js" /><summary type="html">介绍 Browserify lets you require(‘modules’) in the browser by bundling up all of your dependencies.</summary></entry><entry><title type="html">Node.js学习笔记</title><link href="http://localhost:4000/node.js/2019/10/08/Nodejs-learning/" rel="alternate" type="text/html" title="Node.js学习笔记" /><published>2019-10-08T00:00:00+08:00</published><updated>2019-10-08T00:00:00+08:00</updated><id>http://localhost:4000/node.js/2019/10/08/Nodejs-learning</id><content type="html" xml:base="http://localhost:4000/node.js/2019/10/08/Nodejs-learning/">&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.runoob.com/nodejs/nodejs-install-setup.html&quot;&gt;参考链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nodejs升级&quot;&gt;Node.js升级&lt;/h2&gt;

&lt;h3 id=&quot;windows下升级&quot;&gt;windows下升级&lt;/h3&gt;
&lt;p&gt;windows下升级Nodejs比较简单，直接下载msi文件，安装覆盖原安装路径就可以了。由于众所周知的原因，国内访问Nodejs官网下载Nodejs安装文件时间非常DT的事，此处附上淘宝的国内镜像源，速度非常快。&lt;/p&gt;

&lt;h3 id=&quot;linux下升级&quot;&gt;linux下升级&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;检查Node的当前版本&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ node -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;清除npm cache&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo npm chache clean -f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;node有一个模块叫n（这名字可够短的。。。），是专门用来管理node.js的版本的。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install -g n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;升级到最新稳定版本&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ n stable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;升级到指定版本&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ n v4.4.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;或者&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ n 4.4.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;npm升级&quot;&gt;npm升级&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;查看当前版本&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;升级至最新版本或者指定版本
 @符号后面可以添加你想更新到的版本号。
 latest代表是最新版本&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install npm@latest -g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;安装淘宝-npm-镜像&quot;&gt;安装淘宝 NPM 镜像&lt;/h2&gt;

&lt;p&gt;这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install -g cnpm --registry=https://registry.npm.taobao.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;使用cnpm安装模块&quot;&gt;使用cnpm安装模块&lt;/h2&gt;

&lt;p&gt;从 registry.npm.taobao.org 安装所有模块. 当安装的时候发现安装的模块还没有同步过来, 淘宝 NPM 会自动在后台进行同步, 并且会让你从官方 NPM registry.npmjs.org 进行安装. 下次你再安装这个模块的时候, 就会直接从 淘宝 NPM 安装了.&lt;/p&gt;

&lt;h2 id=&quot;其它命令&quot;&gt;其它命令&lt;/h2&gt;

&lt;p&gt;支持 npm 除了 publish 之外的所有命令, 如:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cnpm install [name]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;补充常用npm命令&quot;&gt;补充常用npm命令&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm -v          #显示版本，检查npm 是否正确安装。
$ npm install express   #安装express模块
$ npm install -g express  #全局安装express模块
$ npm install --save express #会把express包安装到该目录下的node_modules目录中,会在package.json的dependencies属性下添加express,之后运行npm install 或者 npm install -production或者著名NODE_ENV变量值为production时，会自动安装express到node_module目录中.
$ npm install --save-dev express #会把express包安装到该目录下的node_modules目录中,会在package.json的dependencies属性下添加express,之后运行npm install会自动安装express到node_module目录中但是执行npm install -production或者著名NODE_ENV变量值为production时，不会自动安装express到node_module目录中.
$ npm install -D express # 等于npm install --save-dev express
$ npm list         #列出已安装模块
$ npm show express     #显示模块详情
$ npm update        #升级当前目录下的项目的所有模块 
$ npm update express    #升级当前目录下的项目的指定模块
$ npm update -g express  #升级全局安装的express模块
$ npm uninstall express  #删除指定的模块
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;table&gt;&lt;tr&gt;&lt;td style=&quot;background-color: #ffdce0 ; border: 1px solid #d73a49;&quot;&gt;注：运行时需要用到的包使用npm install –save express，否则使用npm install –save-dev express。
。&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://npm.taobao.org/&quot;&gt;淘宝NPM镜像&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tj/n&quot;&gt;https://github.com/tj/n&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jb51.net/article/52409.htm&quot;&gt;https://www.jb51.net/article/52409.htm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.npmjs.com/try-the-latest-stable-version-of-npm&quot;&gt;https://docs.npmjs.com/try-the-latest-stable-version-of-npm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zhao Q.H.</name></author><category term="Node.js" /><summary type="html">安装</summary></entry><entry><title type="html">jekyll学习笔记</title><link href="http://localhost:4000/jekyll/2019/09/29/jekyll-learning/" rel="alternate" type="text/html" title="jekyll学习笔记" /><published>2019-09-29T00:00:00+08:00</published><updated>2019-09-29T00:00:00+08:00</updated><id>http://localhost:4000/jekyll/2019/09/29/jekyll-learning</id><content type="html" xml:base="http://localhost:4000/jekyll/2019/09/29/jekyll-learning/">&lt;h2 id=&quot;jekyll安装-使用&quot;&gt;jekyll安装 使用&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ gem install jekyll
~ $ jekyll new myblog
~ $ cd myblog
~/myblog $ jekyll serve //启动server
~/myblog $ bundle exec jekyll server //windows system start jekyll server
# =&amp;gt; Now browse to http://localhost:4000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;jekyll代码块转义特殊字符&quot;&gt;jekyll代码块转义特殊字符&lt;/h2&gt;

&lt;h3 id=&quot;如何显示呢---具体如下&quot;&gt;如何显示呢{{  }} 具体如下：&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 
{% raw %}

{{ msg }} 

{% endraw %}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1368561&quot;&gt;jekyll如何转义特殊字符&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zhao Q.H.</name></author><category term="jekyll" /><summary type="html">jekyll安装 使用 ~ $ gem install jekyll ~ $ jekyll new myblog ~ $ cd myblog ~/myblog $ jekyll serve //启动server ~/myblog $ bundle exec jekyll server //windows system start jekyll server # =&amp;gt; Now browse to http://localhost:4000</summary></entry></feed>